<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Minio对象存储</title>
      <link href="/2022/08/01/filestorage/minio/"/>
      <url>/2022/08/01/filestorage/minio/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Minio对象存储"><a href="#一、Minio对象存储" class="headerlink" title="一、Minio对象存储"></a>一、Minio对象存储</h2><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>分布式Minio可以让你将多块硬盘（甚至在不同的机器上）组成一个对象存储服务。由于硬盘分布在不同的节点上，分布式Minio避免了单点故障。在大数据领域，通常的设计理念都是无中心和分布式。Minio分布式模式可以帮助你搭建一个高可用的对象存储服务，你可以使用这些存储设备，而不用考虑其真实物理位置。</p><ul><li>分布式Minio采用 纠删码来防范多个节点宕机和位衰减<code>bit rot</code>。</li><li>分布式Minio至少需要4个硬盘，使用分布式Minio自动引入了纠删码功能。</li></ul><p><strong>高可用</strong></p><p>单机Minio服务存在单点故障，相反，如果是一个有N块硬盘的分布式Minio,只要有N/2硬盘在线，你的数据就是安全的。不过你需要至少有N/2+1个节点来创建新的对象。</p><p>例如，一个16节点的Minio集群，每个节点16块硬盘，就算8台服务器宕机，这个集群仍然是可读的，不过你需要9台服务器才能写数据。</p><p>注意，只要遵守分布式Minio的限制，你可以组合不同的节点和每个节点几块硬盘。比如，你可以使用2个节点，每个节点4块硬盘，也可以使用4个节点，每个节点两块硬盘，诸如此类。</p><p><strong>一致性</strong></p><p>Minio在分布式和单机模式下，所有读写操作都严格遵守<strong>read-after-write</strong>一致性模型。</p><h2 id="二、minio部署"><a href="#二、minio部署" class="headerlink" title="二、minio部署"></a>二、minio部署</h2><p>二进制文件：<a href="https://dl.min.io/server/minio/release/linux-amd64/minio">https://dl.min.io/server/minio/release/linux-amd64/minio</a></p><p>GitHub: <a href="https://github.com/minio/minio/releases">https://github.com/minio/minio/releases</a></p><h3 id="分布式集群部署"><a href="#分布式集群部署" class="headerlink" title="分布式集群部署"></a>分布式集群部署</h3><ul><li>集群部署需要至少四块盘</li></ul><h4 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bash# audit log 功能export MINIO_AUDIT_WEBHOOK_ENABLE="on" # audit log 功能export MINIO_AUDIT_WEBHOOK_ENDPOINT="http://x.x.x.x:8080/api/ingest?token=logsearch_audit" # audit log 功能export MINIO_LOG_QUERY_URL="http://x.x.x.x:8080"export MINIO_LOG_QUERY_AUTH_TOKEN="logsearch_query"export LOGSEARCH_QUERY_AUTH_TOKEN="logsearch_query"#metricexport MINIO_PROMETHEUS_AUTH_TYPE="public"#storageexport MINIO_STORAGE_CLASS_STANDARD=4export MINIO_STORAGE_CLASS_RRS=2#federationexport MINIO_ETCD_ENDPOINTS="http://x.x.x.etcd01:2380,http://x.x.x.etcd02:2380,http://x.x.x.etcd03:2380"export MINIO_PUBLIC_IPS=x.x.x.1,x.x.x.2,x.x.x.3,x.x.x.4export MINIO_DOMAIN=test.domain#export MINIO_SERVER_URL="http://minio-api.domain"export MINIO_BROWSER_REDIRECT_URL="https://minio.domain"export CONSOLE_SECURE_TLS_REDIRECT="off"export MINIO_ROOT_USER=adminexport MINIO_ROOT_PASSWORD=adminnohup /tools/minio/minio server  \--address ":9001" \--console-address ":8030" \--certs-dir "/data/minio/certs/" \http://minio-{1...4}/data/minio/data/ \ &gt;&gt; /data/minio/logs/run.log 2&gt;&amp;1  &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="环境变量参数"><a href="#环境变量参数" class="headerlink" title="环境变量参数"></a>环境变量参数</h4><p>官网参数：<a href="https://docs.min.io/minio/baremetal/reference/minio-server/minio-server.html">https://docs.min.io/minio/baremetal/reference/minio-server/minio-server.html</a></p><h5 id="MINIO-AUDIT-WEBHOOK-ENABLE"><a href="#MINIO-AUDIT-WEBHOOK-ENABLE" class="headerlink" title="MINIO_AUDIT_WEBHOOK_ENABLE"></a>MINIO_AUDIT_WEBHOOK_ENABLE</h5><p>启用鉴权日志输出到webhook</p><h5 id="MINIO-AUDIT-WEBHOOK-ENDPOINT"><a href="#MINIO-AUDIT-WEBHOOK-ENDPOINT" class="headerlink" title="MINIO_AUDIT_WEBHOOK_ENDPOINT"></a>MINIO_AUDIT_WEBHOOK_ENDPOINT</h5><p>webhook地址</p><h5 id="MINIO-PROMETHEUS-AUTH-TYPE"><a href="#MINIO-PROMETHEUS-AUTH-TYPE" class="headerlink" title="MINIO_PROMETHEUS_AUTH_TYPE"></a>MINIO_PROMETHEUS_AUTH_TYPE</h5><p>public类型，监控数据不需要用户认证</p><h5 id="MINIO-SERVER-URL"><a href="#MINIO-SERVER-URL" class="headerlink" title="MINIO_SERVER_URL"></a>MINIO_SERVER_URL</h5><p>minio api域名地址</p><h5 id="MINIO-BROWSER-REDIRECT-URL"><a href="#MINIO-BROWSER-REDIRECT-URL" class="headerlink" title="MINIO_BROWSER_REDIRECT_URL"></a>MINIO_BROWSER_REDIRECT_URL</h5><p>前端控制页面url</p><h5 id="MINIO-ROOT-USER"><a href="#MINIO-ROOT-USER" class="headerlink" title="MINIO_ROOT_USER"></a>MINIO_ROOT_USER</h5><p>管理员用户名</p><h5 id="MINIO-ROOT-PASSWORD"><a href="#MINIO-ROOT-PASSWORD" class="headerlink" title="MINIO_ROOT_PASSWORD"></a>MINIO_ROOT_PASSWORD</h5><p>管理员密码</p><h3 id="集群扩容"><a href="#集群扩容" class="headerlink" title="集群扩容"></a>集群扩容</h3><p>更新集群环境环境变量后，全量重启</p><ul><li>新增池规模需要与新建集群时一致</li><li>池必须要使用域名，{}格式</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 原池http://minio-{1...4}/data/minio/data/ # 新池http://minio-{5...8}/data/minio/data/  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="联邦扩容（弃）"><a href="#联邦扩容（弃）" class="headerlink" title="联邦扩容（弃）"></a>联邦扩容（弃）</h3><p>新增环境变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#federation# etcd地址export MINIO_ETCD_ENDPOINTS="http://x.x.x.etcd01:2380,http://x.x.x.etcd02:2380,http://x.x.x.etcd03:2380"# 所在集群ip地址export MINIO_PUBLIC_IPS=x.x.x.1,x.x.x.2,x.x.x.3,x.x.x.4# 联邦统一域export MINIO_DOMAIN=test.domain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、mc使用"><a href="#三、mc使用" class="headerlink" title="三、mc使用"></a>三、mc使用</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">service     服务重启并停止所有MinIO服务器update      更新更新所有MinIO服务器info        信息显示MinIO服务器信息user        用户管理用户group       小组管理小组policy      MinIO服务器中定义的策略管理策略config      配置管理MinIO服务器配置heal        修复MinIO服务器上的磁盘，存储桶和对象profile     概要文件生成概要文件数据以进行调试top         顶部提供MinIO的顶部统计信息trace       跟踪显示MinIO服务器的http跟踪console     控制台显示MinIO服务器的控制台日志prometheus  Prometheus管理Prometheus配置kms         kms执行KMS管理操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><code>mc cp minio/test1/a.txt /tmp/</code></p><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p><code>mc cp  /tmp/a.txt  minio/test1/</code></p><h4 id="桶与桶复制"><a href="#桶与桶复制" class="headerlink" title="桶与桶复制"></a>桶与桶复制</h4><p><code>mc cp  minio/test1/a.txt  minio/test2/a.txt</code></p><h3 id="建桶"><a href="#建桶" class="headerlink" title="建桶"></a>建桶</h3><p><code>mc mb minio/test2</code></p><h3 id="删桶"><a href="#删桶" class="headerlink" title="删桶"></a>删桶</h3><p>删桶需要是空桶</p><p><code>mc rb minio/test2</code></p><p>引用：</p><p><a href="https://zhangzhuo.ltd/articles/2021/09/15/1631692730363.html">https://zhangzhuo.ltd/articles/2021/09/15/1631692730363.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Minio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 加密</title>
      <link href="/2022/07/20/go/go-jia-mi/"/>
      <url>/2022/07/20/go/go-jia-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="各密码模块"><a href="#各密码模块" class="headerlink" title="各密码模块"></a>各密码模块</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> public<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bytes"</span><span class="token string">"crypto"</span><span class="token string">"crypto/aes"</span><span class="token string">"crypto/cipher"</span><span class="token string">"crypto/des"</span><span class="token string">"crypto/md5"</span><span class="token string">"crypto/rand"</span><span class="token string">"crypto/rsa"</span><span class="token string">"crypto/sha256"</span><span class="token string">"crypto/x509"</span><span class="token string">"encoding/base64"</span><span class="token string">"encoding/hex"</span><span class="token string">"encoding/pem"</span><span class="token string">"errors"</span><span class="token string">"fmt"</span><span class="token string">"golang.org/x/crypto/md4"</span><span class="token string">"math/big"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token comment">//  ----------------------- AES-CBC -----------------------</span><span class="token keyword">func</span> <span class="token function">CBCEncrypt</span><span class="token punctuation">(</span>text <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> iv <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>padText <span class="token operator">:=</span> <span class="token function">PKCS7Padding</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 填充</span>blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>padText<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 加密</span>blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> padText<span class="token punctuation">)</span><span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CBCDecrypt</span><span class="token punctuation">(</span>encrypt <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> iv <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">)</span>blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> encrypt<span class="token punctuation">)</span><span class="token comment">// 去除填充</span>result <span class="token operator">=</span> <span class="token function">UnPKCS7Padding</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token comment">// PKCS7Padding 计算待填充的长度</span><span class="token keyword">func</span> <span class="token function">PKCS7Padding</span><span class="token punctuation">(</span>text <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> blockSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>padding <span class="token operator">:=</span> blockSize <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token operator">%</span>blockSize<span class="token keyword">var</span> paddingText <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token keyword">if</span> padding <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>paddingText <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token function">byte</span><span class="token punctuation">(</span>blockSize<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> blockSize<span class="token punctuation">)</span> <span class="token comment">// 已对齐，填充一整块数据，每个数据为 blockSize</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>paddingText <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token function">byte</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> padding<span class="token punctuation">)</span> <span class="token comment">// 未对齐 填充 padding 个数据，每个数据为 padding</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> paddingText<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// UnPKCS7Padding 取出填充的数据 以此来获得填充数据长度</span><span class="token keyword">func</span> <span class="token function">UnPKCS7Padding</span><span class="token punctuation">(</span>text <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>unPadding <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">-</span> unPadding<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">//  ----------------------- BASE64 -----------------------</span><span class="token keyword">func</span> <span class="token function">Base64Encoding</span><span class="token punctuation">(</span>input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">return</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Base64Decoding</span><span class="token punctuation">(</span>encodeString <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>decodeBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>encodeString<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>decodeBytes<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Base64UrlEncoding</span><span class="token punctuation">(</span>input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">return</span> base64<span class="token punctuation">.</span>URLEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Base64UrlDecoding</span><span class="token punctuation">(</span>encodeUrl <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>uDec<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>URLEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>encodeUrl<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>uDec<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//  ----------------------- BASE58 -----------------------</span><span class="token keyword">var</span> b58 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"</span><span class="token punctuation">)</span><span class="token comment">// Base58Encoding base58编码</span><span class="token keyword">func</span> <span class="token function">Base58Encoding</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>srcByte <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token comment">// todo 转成十进制</span>i <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>srcByte<span class="token punctuation">)</span><span class="token comment">// todo 循环取余</span><span class="token keyword">var</span> modSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token keyword">for</span> i<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>mod <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>i58 <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">)</span>i<span class="token punctuation">.</span><span class="token function">DivMod</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i58<span class="token punctuation">,</span> mod<span class="token punctuation">)</span>                         <span class="token comment">// 取余</span>modSlice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>modSlice<span class="token punctuation">,</span> b58<span class="token punctuation">[</span>mod<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 将余数添加到数组中</span><span class="token punctuation">}</span><span class="token comment">// todo 把0使用字节'1'代替</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> srcByte <span class="token punctuation">{</span><span class="token keyword">if</span> s <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span>modSlice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>modSlice<span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// todo 反转byte数组</span>retModSlice <span class="token operator">:=</span> <span class="token function">ReverseByteArr</span><span class="token punctuation">(</span>modSlice<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>retModSlice<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Base58Decoding base58解码</span><span class="token keyword">func</span> <span class="token function">Base58Decoding</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token comment">// 转成byte数组</span>srcByte <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token comment">// 这里得到的是十进制</span>ret <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token keyword">range</span> srcByte <span class="token punctuation">{</span>i <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">IndexByte</span><span class="token punctuation">(</span>b58<span class="token punctuation">,</span> b<span class="token punctuation">)</span>ret<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// 乘回去</span>ret<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 相加</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// ReverseByteArr byte数组进行反转方式2</span><span class="token keyword">func</span> <span class="token function">ReverseByteArr</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">return</span> b<span class="token punctuation">}</span><span class="token comment">//  ----------------------- 哈希算法 -----------------------</span><span class="token comment">// HashMD4Encoding MD4哈希加密</span><span class="token keyword">func</span> <span class="token function">HashMD4Encoding</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>srcByte <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>md4New <span class="token operator">:=</span> md4<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>md4Bytes <span class="token operator">:=</span> md4New<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>srcByte<span class="token punctuation">)</span><span class="token keyword">return</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>md4Bytes<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// HashMD5Encoding MD5哈希加密</span><span class="token keyword">func</span> <span class="token function">HashMD5Encoding</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>srcByte <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>md5New <span class="token operator">:=</span> md5<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>md5Bytes <span class="token operator">:=</span> md5New<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>srcByte<span class="token punctuation">)</span><span class="token keyword">return</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>md5Bytes<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// HashSHA256Encoding SHA256哈希加密</span><span class="token keyword">func</span> <span class="token function">HashSHA256Encoding</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>sha256Bytes <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>sha256Bytes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//  ----------------------- DES -----------------------</span><span class="token comment">// DesEncoding 加密</span><span class="token keyword">func</span> <span class="token function">DesEncoding</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">,</span> desKey <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// todo desKey只支持8字节的长度</span>srcByte <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>block<span class="token punctuation">,</span> err <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>desKey<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> src<span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// todo 密码填充</span>newSrcByte <span class="token operator">:=</span> <span class="token function">PadPwd</span><span class="token punctuation">(</span>srcByte<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dst <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>newSrcByte<span class="token punctuation">)</span><span class="token punctuation">)</span>block<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> newSrcByte<span class="token punctuation">)</span><span class="token comment">// todo base64编码</span>pwd <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token keyword">return</span> pwd<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// DesDecoding 解密</span><span class="token keyword">func</span> <span class="token function">DesDecoding</span><span class="token punctuation">(</span>pwd <span class="token builtin">string</span><span class="token punctuation">,</span> desKey <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pwdByte<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> pwd<span class="token punctuation">,</span> err<span class="token punctuation">}</span>block<span class="token punctuation">,</span> errBlock <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>desKey<span class="token punctuation">)</span><span class="token keyword">if</span> errBlock <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> pwd<span class="token punctuation">,</span> errBlock<span class="token punctuation">}</span>dst <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pwdByte<span class="token punctuation">)</span><span class="token punctuation">)</span>block<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> pwdByte<span class="token punctuation">)</span>dst<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">UnPadPwd</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// PadPwd 填充密码长度</span><span class="token keyword">func</span> <span class="token function">PadPwd</span><span class="token punctuation">(</span>srcByte <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> blockSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>padNum <span class="token operator">:=</span> blockSize <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>srcByte<span class="token punctuation">)</span><span class="token operator">%</span>blockSizeret <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token function">byte</span><span class="token punctuation">(</span>padNum<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> padNum<span class="token punctuation">)</span>srcByte <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>srcByte<span class="token punctuation">,</span> ret<span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">return</span> srcByte<span class="token punctuation">}</span><span class="token comment">// UnPadPwd 去掉填充的部分</span><span class="token keyword">func</span> <span class="token function">UnPadPwd</span><span class="token punctuation">(</span>dst <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> dst<span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"长度有误"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>unPadNum <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>dst<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> dst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span> <span class="token operator">-</span> unPadNum<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//  ----------------------- 3DES-CBC -----------------------</span><span class="token comment">// TDesEncoding 3des加密</span><span class="token keyword">func</span> <span class="token function">TDesEncoding</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">,</span> desKey <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// todo key 24位数</span>srcByte <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>block<span class="token punctuation">,</span> err <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewTripleDESCipher</span><span class="token punctuation">(</span>desKey<span class="token punctuation">)</span> <span class="token comment">// 和des的区别</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> src<span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// todo 密码填充</span>newSrcByte <span class="token operator">:=</span> <span class="token function">PadPwd</span><span class="token punctuation">(</span>srcByte<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dst <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>newSrcByte<span class="token punctuation">)</span><span class="token punctuation">)</span>block<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> newSrcByte<span class="token punctuation">)</span><span class="token comment">// todo base64编码</span>pwd <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token keyword">return</span> pwd<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// TDesDecoding 3des解密</span><span class="token keyword">func</span> <span class="token function">TDesDecoding</span><span class="token punctuation">(</span>pwd <span class="token builtin">string</span><span class="token punctuation">,</span> desKey <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pwdByte<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> pwd<span class="token punctuation">,</span> err<span class="token punctuation">}</span>block<span class="token punctuation">,</span> errBlock <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewTripleDESCipher</span><span class="token punctuation">(</span>desKey<span class="token punctuation">)</span> <span class="token comment">// 和des的区别</span><span class="token keyword">if</span> errBlock <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> pwd<span class="token punctuation">,</span> errBlock<span class="token punctuation">}</span>dst <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pwdByte<span class="token punctuation">)</span><span class="token punctuation">)</span>block<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> pwdByte<span class="token punctuation">)</span>dst<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">UnPadPwd</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//  ----------------------- RSA -----------------------</span><span class="token comment">// SaveRsaKey 生成Rsa公钥私钥并保存</span><span class="token keyword">func</span> <span class="token function">SaveRsaKey</span><span class="token punctuation">(</span>bits <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token comment">// todo 处理钥匙</span>privateKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">GenerateKey</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span>publicKey <span class="token operator">:=</span> privateKey<span class="token punctuation">.</span>PublicKeyx509Private <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">MarshalPKCS1PrivateKey</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span>             <span class="token comment">// 使用x509标准对私钥进行编码，AsN.1编码字符串</span>x509Public <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">MarshalPKCS1PublicKey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>publicKey<span class="token punctuation">)</span>               <span class="token comment">// 使用x509标准对公钥进行编码，AsN.1编码字符串</span>blockPrivate <span class="token operator">:=</span> pem<span class="token punctuation">.</span>Block<span class="token punctuation">{</span>Type<span class="token punctuation">:</span> <span class="token string">"private key"</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">:</span> x509Private<span class="token punctuation">}</span> <span class="token comment">// 对私钥封装block 结构数据</span>blockPublic <span class="token operator">:=</span> pem<span class="token punctuation">.</span>Block<span class="token punctuation">{</span>Type<span class="token punctuation">:</span> <span class="token string">"public key"</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">:</span> x509Public<span class="token punctuation">}</span>    <span class="token comment">// 对公钥封装block 结构数据</span><span class="token comment">// todo 创建存放私钥的文件</span>privateFile<span class="token punctuation">,</span> errPri <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"privateKey.pem"</span><span class="token punctuation">)</span><span class="token keyword">if</span> errPri <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> errPri<span class="token punctuation">}</span><span class="token keyword">defer</span> privateFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pem<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>privateFile<span class="token punctuation">,</span> <span class="token operator">&amp;</span>blockPrivate<span class="token punctuation">)</span><span class="token comment">// todo 创建存放公钥的文件</span>publicFile<span class="token punctuation">,</span> errPub <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"publicKey.pem"</span><span class="token punctuation">)</span><span class="token keyword">if</span> errPub <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> errPub<span class="token punctuation">}</span><span class="token keyword">defer</span> publicFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pem<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>publicFile<span class="token punctuation">,</span> <span class="token operator">&amp;</span>blockPublic<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// RsaEncoding 加密</span><span class="token keyword">func</span> <span class="token function">RsaEncoding</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> filePath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>srcByte <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token comment">// todo 打开文件</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> srcByte<span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// todo 获取文件信息</span>fileInfo<span class="token punctuation">,</span> errInfo <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> errInfo <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> srcByte<span class="token punctuation">,</span> errInfo<span class="token punctuation">}</span><span class="token comment">// todo 读取文件内容</span>keyBytes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> fileInfo<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>                                       <span class="token comment">// 读取内容到容器里面</span>block<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> pem<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>                          <span class="token comment">// pem解码</span>publicKey<span class="token punctuation">,</span> errPb <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">ParsePKCS1PublicKey</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Bytes<span class="token punctuation">)</span> <span class="token comment">// x509解码</span><span class="token keyword">if</span> errPb <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> srcByte<span class="token punctuation">,</span> errPb<span class="token punctuation">}</span><span class="token comment">// todo 使用公钥对明文进行加密</span>retByte<span class="token punctuation">,</span> errRet <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">EncryptPKCS1v15</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> srcByte<span class="token punctuation">)</span><span class="token keyword">if</span> errRet <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> srcByte<span class="token punctuation">,</span> errRet<span class="token punctuation">}</span><span class="token keyword">return</span> retByte<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// RsaDecoding 解密</span><span class="token keyword">func</span> <span class="token function">RsaDecoding</span><span class="token punctuation">(</span>srcByte <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> filePath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// todo 打开文件</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> srcByte<span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// todo 获取文件信息</span>fileInfo<span class="token punctuation">,</span> errInfo <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> errInfo <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> srcByte<span class="token punctuation">,</span> errInfo<span class="token punctuation">}</span><span class="token comment">// todo 读取文件内容</span>keyBytes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> fileInfo<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 读取内容到容器里面</span>file<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>block<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> pem<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>                            <span class="token comment">// pem解码</span>privateKey<span class="token punctuation">,</span> errPb <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">ParsePKCS1PrivateKey</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Bytes<span class="token punctuation">)</span> <span class="token comment">// x509解码</span><span class="token keyword">if</span> errPb <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> srcByte<span class="token punctuation">,</span> errPb<span class="token punctuation">}</span><span class="token comment">// todo 进行解密</span>retByte<span class="token punctuation">,</span> errRet <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">DecryptPKCS1v15</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> srcByte<span class="token punctuation">)</span><span class="token keyword">if</span> errRet <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> srcByte<span class="token punctuation">,</span> errRet<span class="token punctuation">}</span><span class="token keyword">return</span> retByte<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//  ----------------------- 数字签名 -----------------------</span><span class="token keyword">func</span> <span class="token function">GetPrivateKey</span><span class="token punctuation">(</span>filePath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// todo 打开文件</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// todo 获取文件信息</span>fileInfo<span class="token punctuation">,</span> errInfo <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> errInfo <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> errInfo<span class="token punctuation">}</span><span class="token comment">// todo 读取文件内容</span>keyBytes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> fileInfo<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>                                         <span class="token comment">// 读取内容到容器里面</span>block<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> pem<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>                            <span class="token comment">// pem解码</span>PrivateKey<span class="token punctuation">,</span> errPb <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">ParsePKCS1PrivateKey</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Bytes<span class="token punctuation">)</span> <span class="token comment">// x509解码</span><span class="token keyword">if</span> errPb <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> errPb<span class="token punctuation">}</span><span class="token keyword">return</span> PrivateKey<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">GetPublicKey</span><span class="token punctuation">(</span>filePath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// todo 打开文件</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// todo 获取文件信息</span>fileInfo<span class="token punctuation">,</span> errInfo <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> errInfo <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> errInfo<span class="token punctuation">}</span><span class="token comment">// todo 读取文件内容</span>keyBytes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> fileInfo<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>                                       <span class="token comment">// 读取内容到容器里面</span>block<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> pem<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>                          <span class="token comment">// pem解码</span>publicKey<span class="token punctuation">,</span> errPb <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">ParsePKCS1PublicKey</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Bytes<span class="token punctuation">)</span> <span class="token comment">// x509解码</span><span class="token keyword">if</span> errPb <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> errPb<span class="token punctuation">}</span><span class="token keyword">return</span> publicKey<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// RsaSign 数字签名</span><span class="token keyword">func</span> <span class="token function">RsaSign</span><span class="token punctuation">(</span>filePath <span class="token builtin">string</span><span class="token punctuation">,</span> src <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// todo 获取私钥</span>private<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetPrivateKey</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// todo 签名</span>shaNew <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>srcByte <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>shaNew<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>srcByte<span class="token punctuation">)</span>shaByte <span class="token operator">:=</span> shaNew<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>v15<span class="token punctuation">,</span> err <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">SignPKCS1v15</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> private<span class="token punctuation">,</span> crypto<span class="token punctuation">.</span>SHA256<span class="token punctuation">,</span> shaByte<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> v15<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// RsaVerify 验证签名</span><span class="token keyword">func</span> <span class="token function">RsaVerify</span><span class="token punctuation">(</span>sign <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> src <span class="token builtin">string</span><span class="token punctuation">,</span> filePath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// todo 拿到公钥</span>public<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetPublicKey</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// todo 验证签名</span>shaNew <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>srcByte <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>shaNew<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>srcByte<span class="token punctuation">)</span>shaByte <span class="token operator">:=</span> shaNew<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>err <span class="token operator">=</span> rsa<span class="token punctuation">.</span><span class="token function">VerifyPKCS1v15</span><span class="token punctuation">(</span>public<span class="token punctuation">,</span> crypto<span class="token punctuation">.</span>SHA256<span class="token punctuation">,</span> shaByte<span class="token punctuation">,</span> sign<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>代码实现</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"GoBackEnd/public"</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// AES-CBC</span>iv <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">}</span>key <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"1111111111111111"</span><span class="token punctuation">)</span>AesCbc <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">CBCEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>AesCbc<span class="token punctuation">)</span>content <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">CBCDecrypt</span><span class="token punctuation">(</span>AesCbc<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// BASE64</span>encode <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">Base64Encoding</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span>decode <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">Base64Decoding</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token comment">// BASE58</span>encode <span class="token operator">=</span> public<span class="token punctuation">.</span><span class="token function">Base58Encoding</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span>decode <span class="token operator">=</span> public<span class="token punctuation">.</span><span class="token function">Base58Decoding</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token comment">// 哈希算法</span>md4 <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">HashMD4Encoding</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>md4<span class="token punctuation">)</span>md5 <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">HashMD5Encoding</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span>sha <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">HashSHA256Encoding</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sha<span class="token punctuation">)</span><span class="token comment">// DES</span>encode<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> public<span class="token punctuation">.</span><span class="token function">DesEncoding</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"11111111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8位数</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Des:"</span><span class="token punctuation">,</span> encode<span class="token punctuation">)</span>decode<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> public<span class="token punctuation">.</span><span class="token function">DesDecoding</span><span class="token punctuation">(</span>encode<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"11111111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Des:"</span><span class="token punctuation">,</span> decode<span class="token punctuation">)</span>encode<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> public<span class="token punctuation">.</span><span class="token function">TDesEncoding</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"111111111111111111111111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 24位数</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span>decode<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> public<span class="token punctuation">.</span><span class="token function">TDesDecoding</span><span class="token punctuation">(</span>encode<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"111111111111111111111111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token comment">// RSA</span>err <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">SaveRsaKey</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>encoding<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">RsaEncoding</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"publicKey.pem"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>public<span class="token punctuation">.</span><span class="token function">Base64Encoding</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span>decoding<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">RsaDecoding</span><span class="token punctuation">(</span>encoding<span class="token punctuation">,</span> <span class="token string">"privateKey.pem"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>decoding<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 数字签名</span>encoding<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> public<span class="token punctuation">.</span><span class="token function">RsaSign</span><span class="token punctuation">(</span><span class="token string">"privateKey.pem"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span>isTrue<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> public<span class="token punctuation">.</span><span class="token function">RsaVerify</span><span class="token punctuation">(</span>encoding<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"publicKey.pem"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>isTrue<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h1><p>AES: 对称加密。AES的基本要求是，采用对称分组密码体制，密钥的长度最少支持为128(16字节)、192(24字节)、256(32字节)，分组长度128位，算法应易于各种硬件和软件实现。<br>步骤:</p><ol><li>   创建结构体AesEncrypter</li><li>   设置key、iv</li><li>   添加加密方法(返回值base64编码)</li><li>   添加解密方法(参数base64解码)</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/base64"</span><span class="token string">"crypto/aes"</span><span class="token string">"crypto/cipher"</span><span class="token string">"bytes"</span><span class="token punctuation">)</span> <span class="token keyword">type</span> AesEncrypter <span class="token keyword">struct</span> <span class="token punctuation">{</span>key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>iv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>block cipher<span class="token punctuation">.</span>Block<span class="token punctuation">}</span> <span class="token keyword">var</span> AesEcpt AesEncrypter <span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>AesEcpt<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"bGcGfWb3Kg2s4gcG"</span><span class="token punctuation">)</span>AesEcpt<span class="token punctuation">.</span>iv<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"aebksHkG4jAEk2Ag"</span><span class="token punctuation">)</span><span class="token keyword">var</span> err <span class="token builtin">error</span>AesEcpt<span class="token punctuation">.</span>block<span class="token punctuation">,</span> err <span class="token operator">=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>AesEcpt<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">// 加密</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AesEncrypter<span class="token punctuation">)</span> <span class="token function">AesBase64Encrypt</span><span class="token punctuation">(</span>in <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>origData <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>origData <span class="token operator">=</span> <span class="token function">PKCS5Padding</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> a<span class="token punctuation">.</span>block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>crypted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 根据CryptBlocks方法的说明，如下方式初始化crypted也可以</span>bm <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>block<span class="token punctuation">,</span> a<span class="token punctuation">.</span>iv<span class="token punctuation">)</span>bm<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> origData<span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token operator">=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>crypted<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span> <span class="token comment">// 解密</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AesEncrypter<span class="token punctuation">)</span> <span class="token function">AesBase64Decrypt</span><span class="token punctuation">(</span>b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>crypted<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">if</span> err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>origData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>crypted<span class="token punctuation">)</span><span class="token punctuation">)</span>bm <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCDecrypter</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>block<span class="token punctuation">,</span> a<span class="token punctuation">.</span>iv<span class="token punctuation">)</span>bm<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> crypted<span class="token punctuation">)</span>origData <span class="token operator">=</span> <span class="token function">PKCS5UnPadding</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token keyword">var</span> out <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">PKCS5Padding</span><span class="token punctuation">(</span>ciphertext <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> blockSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>padding <span class="token operator">:=</span> blockSize <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token operator">%</span>blockSizepadtext <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token function">byte</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> padding<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> padtext<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">PKCS5UnPadding</span><span class="token punctuation">(</span>origData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token comment">// 去掉最后一个字节 unpadding 次</span>unpadding <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>origData<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> origData<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">(</span>length <span class="token operator">-</span> unpadding<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转载：</p><p><a href="https://blog.csdn.net/weixin_51485807/article/details/122924322">https://blog.csdn.net/weixin_51485807/article/details/122924322</a></p><p><a href="https://blog.csdn.net/qq_41998415/article/details/124636194">https://blog.csdn.net/qq_41998415/article/details/124636194</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go RSA加解密</title>
      <link href="/2022/03/11/go/go-rsa-jia-jie-mi/"/>
      <url>/2022/03/11/go/go-rsa-jia-jie-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="生成RSA证书"><a href="#生成RSA证书" class="headerlink" title="生成RSA证书"></a>生成RSA证书</h1><h2 id="openssl方式生成"><a href="#openssl方式生成" class="headerlink" title="openssl方式生成"></a>openssl方式生成</h2><ul><li>生成私钥</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Copyopenssl genrsa -out rsa_private_key.pem <span class="token number">1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>生成公钥</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Copyopenssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Go代码方式生成"><a href="#Go代码方式生成" class="headerlink" title="Go代码方式生成"></a>Go代码方式生成</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">Copypackage main<span class="token keyword">import</span> <span class="token punctuation">(</span>   <span class="token string">"crypto/rand"</span>   <span class="token string">"crypto/rsa"</span>   <span class="token string">"crypto/x509"</span>   <span class="token string">"encoding/pem"</span>   <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token comment">//生成RSA私钥和公钥，保存到文件中</span><span class="token comment">// bits 证书大小</span><span class="token keyword">func</span> <span class="token function">GenerateRSAKey</span><span class="token punctuation">(</span>bits <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥</span>   <span class="token comment">//Reader是一个全局、共享的密码用强随机数生成器</span>   privateKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">GenerateKey</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> bits<span class="token punctuation">)</span>   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token comment">//保存私钥</span>   <span class="token comment">//通过x509标准将得到的ras私钥序列化为ASN.1 的 DER编码字符串</span>   X509PrivateKey <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">MarshalPKCS1PrivateKey</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span>   <span class="token comment">//使用pem格式对x509输出的内容进行编码</span>   <span class="token comment">//创建文件保存私钥</span>   privateFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"private.pem"</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token keyword">defer</span> privateFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//构建一个pem.Block结构体对象</span>   privateBlock <span class="token operator">:=</span> pem<span class="token punctuation">.</span>Block<span class="token punctuation">{</span>Type<span class="token punctuation">:</span> <span class="token string">"RSA Private Key"</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">:</span> X509PrivateKey<span class="token punctuation">}</span>   <span class="token comment">//将数据保存到文件</span>   pem<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>privateFile<span class="token punctuation">,</span> <span class="token operator">&amp;</span>privateBlock<span class="token punctuation">)</span>   <span class="token comment">//保存公钥</span>   <span class="token comment">//获取公钥的数据</span>   publicKey <span class="token operator">:=</span> privateKey<span class="token punctuation">.</span>PublicKey   <span class="token comment">//X509对公钥编码</span>   X509PublicKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">MarshalPKIXPublicKey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>publicKey<span class="token punctuation">)</span>   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token comment">//pem格式编码</span>   <span class="token comment">//创建用于保存公钥的文件</span>   publicFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"public.pem"</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token keyword">defer</span> publicFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//创建一个pem.Block结构体对象</span>   publicBlock <span class="token operator">:=</span> pem<span class="token punctuation">.</span>Block<span class="token punctuation">{</span>Type<span class="token punctuation">:</span> <span class="token string">"RSA Public Key"</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">:</span> X509PublicKey<span class="token punctuation">}</span>   <span class="token comment">//保存到文件</span>   pem<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>publicFile<span class="token punctuation">,</span> <span class="token operator">&amp;</span>publicBlock<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//生成密钥对，保存到文件</span>   <span class="token function">GenerateRSAKey</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="RSA数据加-解密"><a href="#RSA数据加-解密" class="headerlink" title="RSA数据加/解密"></a>RSA数据加/解密</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go">Copypackage main<span class="token keyword">import</span> <span class="token punctuation">(</span>   <span class="token string">"crypto/rand"</span>   <span class="token string">"crypto/rsa"</span>   <span class="token string">"crypto/x509"</span>   <span class="token string">"encoding/pem"</span>   <span class="token string">"fmt"</span>   <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token comment">//RSA加密</span><span class="token comment">// plainText 要加密的数据</span><span class="token comment">// path 公钥匙文件地址</span><span class="token keyword">func</span> <span class="token function">RSA_Encrypt</span><span class="token punctuation">(</span>plainText <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>   <span class="token comment">//打开文件</span>   file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//读取文件的内容</span>   info<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   file<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>   <span class="token comment">//pem解码</span>   block<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> pem<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>   <span class="token comment">//x509解码</span>   publicKeyInterface<span class="token punctuation">,</span> err <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">ParsePKIXPublicKey</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Bytes<span class="token punctuation">)</span>   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token comment">//类型断言</span>   publicKey <span class="token operator">:=</span> publicKeyInterface<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span>   <span class="token comment">//对明文进行加密</span>   cipherText<span class="token punctuation">,</span> err <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">EncryptPKCS1v15</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> plainText<span class="token punctuation">)</span>   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token comment">//返回密文</span>   <span class="token keyword">return</span> cipherText<span class="token punctuation">}</span><span class="token comment">//RSA解密</span><span class="token comment">// cipherText 需要解密的byte数据</span><span class="token comment">// path 私钥文件路径</span><span class="token keyword">func</span> <span class="token function">RSA_Decrypt</span><span class="token punctuation">(</span>cipherText <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>   <span class="token comment">//打开文件</span>   file<span class="token punctuation">,</span>err<span class="token operator">:=</span>os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>   <span class="token keyword">if</span> err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//获取文件内容</span>   info<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   buf<span class="token operator">:=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span>info<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   file<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>   <span class="token comment">//pem解码</span>   block<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> pem<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>   <span class="token comment">//X509解码</span>   privateKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">ParsePKCS1PrivateKey</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Bytes<span class="token punctuation">)</span>   <span class="token keyword">if</span> err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token comment">//对密文进行解密</span>   plainText<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>rsa<span class="token punctuation">.</span><span class="token function">DecryptPKCS1v15</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span>privateKey<span class="token punctuation">,</span>cipherText<span class="token punctuation">)</span>   <span class="token comment">//返回明文</span>   <span class="token keyword">return</span> plainText<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//加密</span>   data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>   encrypt <span class="token operator">:=</span> <span class="token function">RSA_Encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"public.pem"</span><span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 解密</span>   decrypt <span class="token operator">:=</span> <span class="token function">RSA_Decrypt</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">,</span> <span class="token string">"private.pem"</span><span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：</p><p><a href="https://www.cnblogs.com/zhichaoma/p/12516715.html">https://www.cnblogs.com/zhichaoma/p/12516715.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> rsa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 基础</title>
      <link href="/2022/03/10/go/go-ji-chu/"/>
      <url>/2022/03/10/go/go-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang基础"><a href="#Golang基础" class="headerlink" title="Golang基础"></a>Golang基础</h1><h2 id="语法、数据结构"><a href="#语法、数据结构" class="headerlink" title="语法、数据结构"></a>语法、数据结构</h2><h3 id="基础要求"><a href="#基础要求" class="headerlink" title="基础要求"></a>基础要求</h3><p>结构体、指针、nil<br>nil 与空值的区别<br>string和[]byte、slice和array、map、channel概念清晰，能够熟练使用<br>Golang的对象池方案及解决的问题<br>interface的概念及应用，可以举例子<br>关键字：go、defer、panic、recover<br>init 的执行顺序<br>值传递、引用传递</p><h3 id="进阶要求"><a href="#进阶要求" class="headerlink" title="进阶要求"></a>进阶要求</h3><p>unsafe.Pointer使用<br>string和[]byte、slice和array、map、channel等常用数据结构内存结构和并发安全机制<br>reflect的作用和原理<br>闭包、作用域<br>sync包的几种类型的实现：Map、Mutex等<br>defer的执行逻辑<br>参数和执行体<br>带命名返回值</p><h2 id="调度、并发"><a href="#调度、并发" class="headerlink" title="调度、并发"></a>调度、并发</h2><h3 id="基础要求-1"><a href="#基础要求-1" class="headerlink" title="基础要求"></a>基础要求</h3><p>控制并发的几种方式：channel、waitgroup、context<br>协程的概念，使用场景，优缺点，开销<br>协程与进程和线程等优劣对比</p><h3 id="进阶要求-1"><a href="#进阶要求-1" class="headerlink" title="进阶要求"></a>进阶要求</h3><p>常见并发机制channel，waitgroup，context的实现机制<br>channel：如何理解 Don’t communicate by sharing memory; share memory by communicating；<br>channel有无buffer的区别<br>协程的实现机制<br>go的内存模型，happens before原则、举例<br>GC机制（进阶）<br>GC基本过程，阶段<br>导致GC问题的影响因素有哪些？减少GC停顿时间的优化思路<br>常见优化GC的方法<br>Go的堆和栈与C的堆和栈区别<br>性能优化<br>工具<br>trace，pprof，benchmark<br>思路<br>CPU，MEM</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES命令</title>
      <link href="/2022/03/10/elasticsearch/es-ming-ling/"/>
      <url>/2022/03/10/elasticsearch/es-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h1><h2 id="清空全部缓存"><a href="#清空全部缓存" class="headerlink" title="清空全部缓存"></a>清空全部缓存</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl localhost:9200/_cache/clear?pretty{  "_shards" : {    "total" : 72,    "successful" : 72,    "failed" : 0  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="清除单一索引缓存"><a href="#清除单一索引缓存" class="headerlink" title="清除单一索引缓存"></a>清除单一索引缓存</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl localhost:9200/index/_cache/clear?pretty{  "_shards" : {    "total" : 2,    "successful" : 2,    "failed" : 0  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="清除多索引缓存"><a href="#清除多索引缓存" class="headerlink" title="清除多索引缓存"></a>清除多索引缓存</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl localhost:9200/index1,index2,index3/_cache/clear?pretty{  "_shards" : {    "total" : 12,    "successful" : 12,    "failed" : 0  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo问题处理</title>
      <link href="/2022/03/07/hexo/"/>
      <url>/2022/03/07/hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo分类标签中关于大小写的bug"><a href="#Hexo分类标签中关于大小写的bug" class="headerlink" title="Hexo分类标签中关于大小写的bug"></a>Hexo分类标签中关于大小写的bug</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>tag含大写字母的时候，页面点击对应的tag，找不到对应页面</p><p>将url中的大写改成小写才能正常访问</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>修改文件<code>.deploy_git/.git/config</code></p><p>将<code>ignorecase=true</code>改为<code>ignorecase=false</code></p><p>重新<code>hexo clean</code>;<code>hexo g</code>;<code>hexo d</code></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tengine</title>
      <link href="/2022/03/07/tengine/tengine/"/>
      <url>/2022/03/07/tengine/tengine/</url>
      
        <content type="html"><![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><code>http://tengine.taobao.org</code></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装依赖</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">yum -y install gcc gcc-c++  bzip2 perl curl curl-devel expat-devel gettext-devel openssl-devel libxml2 libxml2-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-devel autoconf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置源</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">yum -y install epel-releaseyum -y install libmcrypt libmcrypt-devel mcrypt mhash <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置编译参数</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">./configure --prefix=/tools/nginx   --with-http_ssl_module   --with-http_v2_module   --with-http_realip_module   --with-http_stub_status_module   --with-http_gzip_static_module   --with-pcre   --with-file-aio  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th><strong>编译配置参数</strong></th><th><strong>默认编译状态</strong></th><th><strong>参数说明</strong></th></tr></thead><tbody><tr><td>–without-procs</td><td>编译</td><td>不编译 Procs 模块</td></tr><tr><td>–without-http_ssl_module</td><td>编译</td><td>不编译 HTTP SSL 支持模块</td></tr><tr><td>–without-http_stub_status_module</td><td>编译</td><td>不编译运行状态模块</td></tr><tr><td>–without-http-upstream-rbtree</td><td>编译</td><td>不使用红黑树（RBTree）方式进行上游服务器的查找</td></tr><tr><td>–with-http_lua_module</td><td>不编译</td><td>编译 Lua 脚本模块</td></tr><tr><td>–with-stream_sni</td><td>不编译</td><td>编译 TCP 代理时基于 SSL 的 SNI 支持</td></tr><tr><td>–with-jemalloc</td><td>不编译</td><td>启用 jemalloc 内存管理</td></tr><tr><td>–with-http_realip_module</td><td>不编译</td><td>启用ngx_http_realip_module</td></tr><tr><td>–with-http_stub_status_module</td><td>不编译</td><td>启用ngx_http_stub_status_module</td></tr><tr><td>–with-http_gzip_static_module</td><td>不编译</td><td>启用ngx_http_gzip_static_module</td></tr><tr><td>–with-file-aio</td><td>不编译</td><td>启用file AIO support</td></tr></tbody></table><p>编译及安装</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="集成模块"><a href="#集成模块" class="headerlink" title="集成模块"></a>集成模块</h1><table><thead><tr><th><strong>模块文件夹名</strong></th><th><strong>模块说明</strong></th></tr></thead><tbody><tr><td>mod_dubbo</td><td>提供对与后端 Dubbo 服务体系对接的支持</td></tr><tr><td>ngx_backtrace_module</td><td>该模块可用于在工作进程异常退出时转储 Nginx 的回溯信息，如在接收到某些信号（sigabr、sigbus、sigfpe、sigill、sigiot、sigsegv）时。它非常便于调试</td></tr><tr><td>ngx_debug_pool</td><td>该模块可以提供 Nginx/Tengine 内存池占用内存的状态信息</td></tr><tr><td>ngx_debug_timer</td><td>该模块可以提供 Nginx/Tengine 定时器的状态信息</td></tr><tr><td>ngx_http_concat_module</td><td>类似于 Apache 中的 mod_concat 模块，用于将多个文件合并在一个响应报文中</td></tr><tr><td>ngx_http_footer_filter_module</td><td>在请求的响应末尾输出一段内容</td></tr><tr><td>ngx_http_lua_module</td><td>Lua 脚本集成模块</td></tr><tr><td>ngx_http_proxy_connect_module</td><td>提供对 HTTP 的 CONNECT 方法的支持</td></tr><tr><td>ngx_http_reqstat_module</td><td>监控模块</td></tr><tr><td>ngx_http_slice_module</td><td>文件切片模块</td></tr><tr><td>ngx_http_sysguard_module</td><td>该模块监控内存（含 SWAP 分区）、CPU 和请求的响应时间，当某些监控指标达到设定的阈值时，跳转到指定的 URL</td></tr><tr><td>ngx_http_tfs_module</td><td>该模块实现了 TFS 的客户端，为 TFS 提供了 RESTful API。TFS 的全称是 Taobao File System，是淘宝的一个开源分布式文件系统</td></tr><tr><td>ngx_http_trim_filter_module</td><td>该模块用于删除 HTML、内嵌在 JavaScript 和 CSS 中的注释以及重复的空白符</td></tr><tr><td>ngx_http_upstream_check_module</td><td>该模块可以为 Tengine 提供主动式后端服务器健康检查功能</td></tr><tr><td>ngx_http_upstream_consistent_hash_module</td><td>该模块提供一致性 hash 作为负载均衡算法</td></tr><tr><td>ngx_http_upstream_dynamic_module</td><td>此模块可在运行时动态解析 upstream 中 Server 域名</td></tr><tr><td>ngx_http_upstream_dyups_module</td><td>upstream 动态修改模块</td></tr><tr><td>ngx_http_upstream_session_sticky_module</td><td>该模块是一个负载均衡模块，通过 cookie 实现客户端与后端服务器的会话保持，在一定条件下可以保证同一个客户端访问的是同一个后端服务器</td></tr><tr><td>ngx_http_upstream_vnswrr_module</td><td>该模块是一个高效的负载均衡算法，同 Nginx 官方的加权轮询算法 SWRR 相比，VNSWRR 具备平滑、散列和高性能特征</td></tr><tr><td>ngx_http_user_agent_module</td><td>该模块可以分析 HTTP 消息头属性字段“User-Agent”中的内容</td></tr><tr><td>ngx_multi_upstream_module</td><td>Dubbo 服务的多路复用连接支持模块</td></tr><tr><td>ngx_slab_stat</td><td>该模块可以提供 Nginx/Tengine 共享内存的状态信息</td></tr></tbody></table><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="隐藏Tengine版本信息"><a href="#隐藏Tengine版本信息" class="headerlink" title="隐藏Tengine版本信息"></a>隐藏Tengine版本信息</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">http {...    server_tokens off;    server_info off;    server_tag off;...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：</p><p><a href="https://www.cnblogs.com/lizexiong/p/15012824.html">https://www.cnblogs.com/lizexiong/p/15012824.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Tengine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tengine </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubeadm proxy代理</title>
      <link href="/2022/03/07/k8s/kubeadm-proxy-dai-li/"/>
      <url>/2022/03/07/k8s/kubeadm-proxy-dai-li/</url>
      
        <content type="html"><![CDATA[<h1 id="kubeadm-proxy代理"><a href="#kubeadm-proxy代理" class="headerlink" title="kubeadm proxy代理"></a>kubeadm proxy代理</h1><p>配置http代理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># vi ~/.profile</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span><span class="token string">"http://k8s-master:8118"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span><span class="token variable">$http_proxy</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">no_proxy</span><span class="token operator">=</span><span class="token string">"localhost,127.0.0.1,localaddress,.localdomain.com,172.16.100.50"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker配置http代理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># mkdir /etc/systemd/system/docker.service.d/</span><span class="token comment"># cd /etc/systemd/system/docker.service.d/</span><span class="token comment"># vi http-proxy.conf</span><span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Environment</span><span class="token operator">=</span><span class="token string">"HTTP_PROXY=http://172.17.26.11:8888"</span><span class="token assign-left variable">Environment</span><span class="token operator">=</span><span class="token string">"HTTPS_PROXY=http://172.17.26.11:8888"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sidecar模式</title>
      <link href="/2022/03/04/k8s/kubernetes/sidecar/"/>
      <url>/2022/03/04/k8s/kubernetes/sidecar/</url>
      
        <content type="html"><![CDATA[<h1 id="Sidecar模式"><a href="#Sidecar模式" class="headerlink" title="Sidecar模式"></a>Sidecar模式</h1><p>一、yaml配置</p><pre class="line-numbers language-none"><code class="language-none">apiVersion: apps/v1kind: Deploymentmetadata:  name: log-test  labels:    app: log-testspec:  selector:    matchLabels:      app: log-test  template:    metadata:      labels:        app: log-test    spec:      nodeName: xxx.xxx.xxx.xxx      containers:      - name: nginxlog        image: test:1.0.0        imagePullPolicy: Never #不拉镜像        ports:        - containerPort: 80          protocol: TCP        resources: {}        volumeMounts:        - name: filebeat-input  # sidecar日志卷名          mountPath: /data/appLogs  # 应用日志输出路径      - name: filebeat        image: test-filebeat:1.0.0         imagePullPolicy: Never  # 不拉镜像        volumeMounts:        - name: filebeat-input  # sidecar日志卷名--要和应用的一致          mountPath: /data/appLogs  # 读取容器日志输出路径        - name: test-volume  # 存储卷名，要和hostPath卷名一致          mountPath: /data/dataLogs # 与宿主机共享的目录      volumes:      - name: filebeat-input  # sidecar日志卷名--要和应用的一致        emptyDir: {}  # 用作临时空间，当Pod从Node上移除时，emptyDir中的数据会被永久删除      - name: data        emptyDir: {}      - name: test-volume  # 存储卷名        hostPath:  # 映射node文件系统中的文件或者目录到pod里          path: /data   # 宿主机存储路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h2><p>emptyDir类型的Volume在Pod分配到Node上时被创建，Kubernetes会在Node上自动分配一个目录，因此无需指定宿主机Node上对应的目录文件。 这个目录的初始内容为空，当Pod从Node上移除时，emptyDir中的数据会被永久删除。</p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM参数配置</title>
      <link href="/2022/03/04/jvm-pei-zhi/"/>
      <url>/2022/03/04/jvm-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM配置"><a href="#JVM配置" class="headerlink" title="JVM配置"></a>JVM配置</h1><table><thead><tr><th>参数</th><th>含义</th><th></th></tr></thead><tbody><tr><td>-Djava.io.tmpdir=xxx</td><td>tmp目录</td><td></td></tr><tr><td>-XX:+UseCompressedOops</td><td>压缩指针</td><td></td></tr><tr><td>-Xms</td><td>java虚机机堆区内存初始分配大小</td><td></td></tr><tr><td>-Xmx</td><td>java虚拟机堆区内存可被分配最大上限</td><td>老年代的空间大小XX:OldSize设置，这里没有设置，用于存放经过几次Minor GC之后依旧存活的对象。<br>        当老年代的空间不足时，会触发Major GC/Full GC，速度一般比Minor GC慢10倍以上。</td></tr><tr><td>-XX:PermSize</td><td>表示非堆区初始内存分配大小（存放内容：方法区，永生代）</td><td>主要存储的信息包括：常量信息，类信息，方法信息，而且是全局共享的（多线程共享）<br>        一旦类的元数据超过了永久代大小，就会抛出OOM异常</td></tr><tr><td>-XX:MaxPermSize</td><td>表示对非堆区分配的内存最大上限（存放内容：方法区，永生代）</td><td></td></tr><tr><td>-XX:NewSize</td><td>新生代初始内存大小</td><td></td></tr><tr><td>-XX:MaxNewSize</td><td>新生代可被分配的内存最大上限</td><td>-Xmn（默认等效 -Xmn=-XX:NewSize=-XX:MaxNewSize=?）</td></tr><tr><td>-XX:SurvivorRatio</td><td>定义新生代Eden和Survivor的比例</td><td>新生代由 Eden 与 Survivor Space（S0，S1）构成<br>        默认8，Eden与Survivor Space的内存大小比例默认为8:1，所以Eden与Survivor(2个)比例为8：2<br>        如果新生代为10M，则Eden 8M，Survivor Space 2M<br>        大多数情况下，对象在Eden中分配，当Eden没有足够空间时，会触发一次Minor GC。<br>        Survivor是新生代和老年代的缓冲区域<br>        当新生代发生GC（Minor GC）时，会将存活的对象移动到Survivor Space S0内存区域，并清空Eden区域<br>        当再次发生Minor GC时，将Eden和Survivor Space S0中存活的对象移动到S1内存区域。<br>        存活对象会反复在S0和S1之间移动，当对象从Eden移动到Survivor或者在Survivor之间移动时<br>        对象的GC年龄自动累加，当GC年龄超过默认阈值15时，会将该对象移动到老年代，可以通过参数-XX:MaxTenuringThreshold 对GC年龄的阈值进行设置。</td></tr><tr><td>-Xloggc</td><td>gc日志路径</td><td></td></tr><tr><td>-verbose:gc</td><td>-XX:+PrintGC 与 -verbose:gc 是一样的，可以认为-verbose:gc 是 -XX:+PrintGC的别名</td><td>引用计数法,判断对象是否存活<br>        在对象上添加一个引用计数器，每当有一个对象引用它时，计数器加1，当使用完该对象时，计数器减1，计数器值为0的对象表示不可能再被使用。</td></tr><tr><td>-XX:+PrintGCDateStamps</td><td>打印gc日志记录的是系统时间</td><td></td></tr><tr><td>-XX:+PrintGCDetails</td><td>开启GC日志输出，告诉虚拟机在发生垃圾回收时打印内存回收日志</td><td></td></tr><tr><td>-XX:+UseConcMarkSweepGC</td><td>设置年老代为并发收集</td><td></td></tr><tr><td>-XX:+DisableExplicitGC</td><td>禁止调用System.gc()，但JVM的gc仍然有效</td><td></td></tr><tr><td>-XX:ParallelGCThreads</td><td>配置并行收集器的线程数，即：同时多少个线程一起进行垃圾回收。此值最好配置与处理器数目相等</td><td></td></tr><tr><td>-XX:+HeapDumpOnOutOfMemoryError</td><td>当首次遭遇内存溢出时导出此时堆中相关信息</td><td></td></tr><tr><td>-XX:HeapDumpPath</td><td>指定导出堆信息时的路径或文件名</td><td></td></tr><tr><td>-XX:+PerfDataSaveToFile</td><td>在退出时保存jvmstat的二进制数据</td><td></td></tr></tbody></table><h2 id="垃圾收集器-gc的一种-CMS"><a href="#垃圾收集器-gc的一种-CMS" class="headerlink" title="垃圾收集器(gc的一种 CMS)"></a>垃圾收集器(gc的一种 CMS)</h2><table><thead><tr><th>参数</th><th>含义</th><th></th></tr></thead><tbody><tr><td>-XX:CMSInitiatingOccupancyFraction=80</td><td>是指设定CMS在对内存占用率达到80%的时候开始GC(因为CMS会有浮动垃圾,所以一般都较早启动GC);</td><td></td></tr><tr><td>-XX:+UseCMSInitiatingOccupancyOnly</td><td>只是用设定的回收阈值(上面指定的80%),如果不指定,JVM仅在第一次使用设定值,后续则自动调整.</td><td></td></tr><tr><td>-XX:+UseCMSCompactAtFullCollection</td><td>打开对年老代的压缩。可能会影响性能，但是可以消除内存碎片</td><td></td></tr><tr><td>-XX:+CMSClassUnloadingEnabled</td><td>CMS收集器默认不会对永久代进行垃圾回收，打开则对永久代进行垃圾回收</td><td></td></tr></tbody></table><p>​        CMS收集器（并发GC）是一种以获取最短回收停顿时间为目标的收集器，工作在老年代，基于“标记-清除”算法实现，整个过程分为以下4步：</p><ol><li><p>初始标记：这个过程只是标记以下GC Roots能够直接关联的对象，但是仍然会Stop The World；</p></li><li><p>并发标记：进行GC Roots Tracing的过程，可以和用户线程一起工作。</p></li><li><p>重新标记：用于修正并发标记期间由于用户程序继续运行而导致标记产生变动的那部分记录，这个过程会暂停所有线程，但其停顿时间远比并发标记的时间短；</p></li><li><p>并发清理：可以和用户线程一起工作。</p></li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>​        CMS是基于标记-清除算法实现的，意味着收集结束后会造成大量的内存碎片，</p><p>​        可能导致出现老年代剩余空间很大，却无法找到足够大的连续空间分配当前对象，</p><p>​        不得不提前触发一次Full GC。所以加上UseCMSCompactAtFullCollection消除碎片</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习</title>
      <link href="/2022/03/04/k8s/docker/"/>
      <url>/2022/03/04/k8s/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="一-docker体系结构"><a href="#一-docker体系结构" class="headerlink" title="一.docker体系结构"></a>一.docker体系结构</h2><ol><li>containerd:一个守护进程，使用runC管理容器，向docker engine提供接口</li><li>Shim:只负责管理容器</li><li>runC:是一个轻量级的工具，只能来运行容器</li></ol><p>命令：</p><pre class="line-numbers language-none"><code class="language-none">pstree可以看进程树ps axjf -p 进程（查看进程树）docker rm -f $(docker ps -q -a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-docker内部组件"><a href="#二-docker内部组件" class="headerlink" title="二.docker内部组件"></a>二.docker内部组件</h2><ul><li>namespaces:命名空间，linux内核提供的一种对进程<strong>资源隔离</strong>的机制，例如进程，网络，挂载点等资源</li><li>CGroups:控制组，Linux内核提供的一种限制进程资源的机制，例如CPU，内存等资源</li><li>unionFS:联合文件系统，支持将不同位置的目录挂载到同一虚拟文件系统，形成一种分层的模型</li></ul><h4 id="虚拟机与容器区别"><a href="#虚拟机与容器区别" class="headerlink" title="虚拟机与容器区别"></a>虚拟机与容器区别</h4><pre class="line-numbers language-none"><code class="language-none">docker秒级启动，资源占用少，不需要hypervisor层开销，容器新能基本接近于物理机。共享物理机内核，进程级隔离，隔离性和稳定性不同虚机。并有一定权限访问宿主机内核。不需要cpu支持虚拟化技术<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="容器存储驱动"><a href="#容器存储驱动" class="headerlink" title="容器存储驱动"></a>容器存储驱动</h4><ul><li>ubuntu:aufs</li><li>centos:devicemapper</li><li>overlay,overlay2</li></ul><p>overlay2性能更好，只支持ext4,xfs</p><p>命令：</p><pre class="line-numbers language-none"><code class="language-none">修改centos7时区：cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime调整时间：date -s "2020-11-28 22:38:25" 4.docker存储驱动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三-镜像管理命令"><a href="#三-镜像管理命令" class="headerlink" title="三.镜像管理命令"></a>三.镜像管理命令</h2><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><pre class="line-numbers language-none"><code class="language-none">ls 列出镜像history 查看镜像历史inspect 显示一个或多个镜像详细信息pull 拉取镜像push 推送镜像rm 删除镜像tag 创建一个引用源镜像标记目标镜像export 导出容器文件系统到归档文件import 导入容器文件系统save 保存镜像到归档文件load 加载镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-docker管理命令"><a href="#四-docker管理命令" class="headerlink" title="四.docker管理命令"></a>四.docker管理命令</h2><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><pre class="line-numbers language-none"><code class="language-none">docker container run -i(交互) -t(新建终端) -d(后台运行) -e(传入一个变量) --name(命名) busybox(镜像名放在最后面)-p 宿主机端口:容器内部监听端口-h 设置主机名--restart=always容器退出时重启策略--add-host list 添加其他主机到容器中/etc/hosts--cpus cpu核数-m 或--memory指定内存容量--oom-kill-disable 设置memory后再设置oom选项--memory-swappiness=&lt;0-100&gt; 容器使用swap交换分区的百分比docker container stats 容器名（查看容器资源利用率）docker exec -it 容器名 sh或者bashdocker container attach 容器名（进入容器）crtl+p+q退出容器不停容器（attach进入的默认退出会停容器）mount查看挂载情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-容器管理"><a href="#五-容器管理" class="headerlink" title="五.容器管理"></a>五.容器管理</h2><pre class="line-numbers language-none"><code class="language-none">docker container inspect 容器名docker top 容器名（查看容器中的进程）docker container attach nginx(进不了nginx,执行docker top nginx查看，因为ng容器前台运行一个进程，堵塞了)docker commit 容器 镜像名:tag名 （提交容器到镜像）docker container cp 本地文件 容器:绝对路径 （复制本地文件到容器中，重启容器不会丢失文件）docker restart 容器名docker container exec 容器名 命令（在容器中执行命令）docker logs 容器名（查看容器日志）docker port 容器（查看容器端口映射）docker update 容器（资源配置修改，及时生效）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六-管理应用程序数据"><a href="#六-管理应用程序数据" class="headerlink" title="六.管理应用程序数据"></a>六.管理应用程序数据</h2><p>docker提供三种将数据从宿主机挂载到容器中：volumes,bind mounts 和tmpfs</p><ol><li>volumes:docker管理宿主机文件系统的一部分（/var/lib/docker/volumes）</li><li>bind mounts:可以存储在宿主机系统的任意位置</li><li>tmpfs:挂载存储在宿主机系统的内存中，而不会写入宿主机的文件系统</li></ol><ul><li><h4 id="volume-docker-volume-create-卷名"><a href="#volume-docker-volume-create-卷名" class="headerlink" title="volume: docker volume create 卷名"></a>volume: docker volume create 卷名</h4></li></ul><pre class="line-numbers language-none"><code class="language-none">docker volume ls （查看卷list）docker volume inspect 卷名（查看卷的详细信息）docker run -d -it --name=nginx-test --mount src=nginx-vol,dst=/usr/share/nginx/html nginx--mount 和-v有一点不同（-v只支持数据卷，用mount更通用）src引用卷名dst 容器挂载的路径路径volumes 卷路径默认在/var/lib/docker/volumes/卷名docker rm -f $(docker ps -q -a)  (删除所有的容器)docker ps -q(只显示容器id) -a(显示所有容器)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="bind-mounts"><a href="#bind-mounts" class="headerlink" title="bind mounts:"></a>bind mounts:</h4></li></ul><pre class="line-numbers language-none"><code class="language-none">docker run -d -it --name=nginx-test --mount type=bind,src=/app/wwwroot,dst=/usr/share/nginx/html nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意点：</p><pre class="line-numbers language-none"><code class="language-none">bind的挂载到容器时，会把容器中目标目录的文件隐藏(-v 不支持bind)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="七、搭建LNMP网站平台"><a href="#七、搭建LNMP网站平台" class="headerlink" title="七、搭建LNMP网站平台"></a>七、搭建LNMP网站平台</h2><ol><li>自定义网络</li></ol><pre class="line-numbers language-none"><code class="language-none">docker network create lnmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>创建mysql数据库容器</li></ol><pre class="line-numbers language-none"><code class="language-none">docker run -itd --name lnmp_mysql --net lnmp -p 3307:3306 --mount src=mysql-vol,dst=/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=123456 mysql --character-set-server=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>创建数据库</li></ol><pre class="line-numbers language-none"><code class="language-none">docker exec lnmp_mysql  sh -c 'exec mysql -uroot -p "$MYSQL_ROOT_PASSWORD"  -e"create database wp"'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>创建PHP环境容器</li></ol><pre class="line-numbers language-none"><code class="language-none">docker run -itd --name lnmp_web --net lnmp -p 88:80 --mount type=bind,src=/app/wwwroot,dst=/var/www/html richarvey/nginx-php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八、Dockerfile"><a href="#八、Dockerfile" class="headerlink" title="八、Dockerfile"></a>八、Dockerfile</h2><h4 id="Dockerfile相关指令"><a href="#Dockerfile相关指令" class="headerlink" title="Dockerfile相关指令"></a>Dockerfile相关指令</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>FROM</td><td>构建的镜像基于哪个镜像</td></tr><tr><td>MAINTAINER</td><td>镜像维护者的姓名/邮箱</td></tr><tr><td>RUN</td><td>构建镜像时运行的shell命令</td></tr><tr><td>CMD</td><td>运行容器时执行的shell命令</td></tr><tr><td>EXPOSE</td><td>声明容器运行的服务端口</td></tr><tr><td>ENV</td><td>设置容器内环境变量</td></tr><tr><td>ADD</td><td>复制文件或目录到镜像，如果时url或压缩包会自动下载或者解压</td></tr><tr><td>COPY</td><td>复制文件或目录到镜像上</td></tr><tr><td>ENTRYPOINT</td><td>运行容器时执行shell命令</td></tr><tr><td>VOLUME</td><td>知道容器挂载点到宿主机自动生成的目录或其他容器</td></tr><tr><td>USER</td><td>为RUN,CMD,ENTRYPOINT执行命令指定运行用户</td></tr><tr><td>WORKDIR</td><td>为RUN,CMD,ENTRYPOINT,COPY和ADD设置工作目录</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td></tr><tr><td>ARG</td><td>在构建镜像时指定一些参数</td></tr></tbody></table><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker build -t 镜像名：tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">docker build -t 镜像名称  -f 指定Dockerfile文件位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="九、镜像仓库"><a href="#九、镜像仓库" class="headerlink" title="九、镜像仓库"></a>九、镜像仓库</h2><ul><li><h4 id="搭建私有镜像仓库"><a href="#搭建私有镜像仓库" class="headerlink" title="搭建私有镜像仓库"></a>搭建私有镜像仓库</h4></li></ul><ol><li>拉取仓库docker</li></ol><pre class="line-numbers language-none"><code class="language-none">docker pull registrydocker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>测试，查看镜像信息</li></ol><pre class="line-numbers language-none"><code class="language-none">curl http://ip:端口/v2/_catalog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>客户服务器配置私有仓库可信任</li></ol><pre class="line-numbers language-none"><code class="language-none">vi /etc/docker /daemon.json{"insecure-registries":["ip:端口"]}systemctl restart docker <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>打标签</li></ol><pre class="line-numbers language-none"><code class="language-none">docker tag centos:6 ip:端口/centos:6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>上传</li></ol><pre class="line-numbers language-none"><code class="language-none">docker push ip:端口/centos:6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>下载</li></ol><pre class="line-numbers language-none"><code class="language-none">docker pull ip:端口/centos:6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>列出镜像标签</li></ol><pre class="line-numbers language-none"><code class="language-none">curl http://ip:端口/v2/centos/tags/list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h4 id="docker-hub公共镜像仓库"><a href="#docker-hub公共镜像仓库" class="headerlink" title="docker hub公共镜像仓库"></a>docker hub公共镜像仓库</h4></li></ul><ol><li>注册账号</li></ol><p><a href="https://hub.docker.com/">https://hub.docker.com</a></p><ol><li>登陆docker hub</li></ol><pre class="line-numbers language-none"><code class="language-none">docker login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">docker login --username=xxx  --password=xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>镜像打标签</li></ol><pre class="line-numbers language-none"><code class="language-none">docker tag nginx:v1  xxxusername/nginx:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>上传</li></ol><pre class="line-numbers language-none"><code class="language-none">docker push xxx/nginx:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索测试：</p><pre class="line-numbers language-none"><code class="language-none">docker search xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>下载</li></ol><pre class="line-numbers language-none"><code class="language-none">docker pull xxx/nginx:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h4 id="企业级私有镜像仓库Harbor"><a href="#企业级私有镜像仓库Harbor" class="headerlink" title="企业级私有镜像仓库Harbor"></a>企业级私有镜像仓库Harbor</h4></li></ul><ol><li>下载离线安装包</li></ol><p><a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p><ol><li><p>安装docker</p><p>2.1 移除老版本docker</p></li></ol><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 安装新版本docker</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>安装docker-compose</li></ol><pre class="line-numbers language-none"><code class="language-none">yum -y install epel-releaseyum -y install docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>自签TLS证书</li></ol><pre class="line-numbers language-none"><code class="language-none">openssl req  -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crtopenssl req  -newkey rsa:4096 -nodes -sha256 -keyout reg.xxdeye.com.key -out reg.xxdeye.com.csropenssl x509 -req -days 365 -in reg.xxdeye.com.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out   reg.xxdeye.com.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Harbor安装与配置</li></ol><p>下载离线包，解压</p><p>复制harbor.yml.tmpl成harbor.yml</p><p>修改hostname用域名</p><p>修改证书和认证地址certificate，private_key</p><p>修改harbor_admin_password管理员密码</p><p>注：</p><p>执行./prepare准备（从网上下载镜像包）</p><p>执行./install.sh 安装（从离线包中安装镜像）</p><ol><li>Docker主机访问Harbor</li></ol><pre class="line-numbers language-none"><code class="language-none">mkdir /etc/docker/certs.d/reg.xxdeye.com -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把reg.xxdeye.com.crt文件放到这个目录下（只要这个文件，有其他的文件会登陆不上的）</p><pre class="line-numbers language-none"><code class="language-none">docker login reg.xxdeye.com （登陆）docker tag nginx:latest reg.xxdeye.com/test/nginx:v1 （打标签）docker push reg.xxdeye.com/test/nginx:v1（push镜像）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拉取:</p><pre class="line-numbers language-none"><code class="language-none">docker pull reg.xxdeye.com/test/nginx:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="十、遇到问题："><a href="#十、遇到问题：" class="headerlink" title="十、遇到问题："></a>十、遇到问题：</h2><ul><li><h4 id="升级docker版本启动失败-1"><a href="#升级docker版本启动失败-1" class="headerlink" title="升级docker版本启动失败(1)"></a>升级docker版本启动失败(1)</h4></li></ul><p><a href="https://www.cnblogs.com/dongweizhen/p/13800883.html">https://www.cnblogs.com/dongweizhen/p/13800883.html</a></p><p>Error response from daemon: Unknown runtime specified docker-runc</p><p>解决方法：</p><p>更改/var/lib/docker/containers目录中的文件参数，把docker-runc替换为runc</p><p>注：grep -rl：递归搜索目录和子目录，只列出含有匹配的文本行的文件名，而不显示具体的匹配内容</p><p>xargs：衔接执行之前得到的值</p><p>总体意思是把/var/lib/docker/containers中含有‘docker-runc’的文件搜索出来，并把‘docker-runc’字符为runc</p><p>命令：</p><pre class="line-numbers language-none"><code class="language-none">grep -rl 'docker-runc' /var/lib/docker/containers/ | xargs sed -i 's/docker-runc/runc/g'systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><h4 id="升级docker版本启动失败-2"><a href="#升级docker版本启动失败-2" class="headerlink" title="升级docker版本启动失败(2)"></a>升级docker版本启动失败(2)</h4></li></ul><p>docker: Error response from daemon: pull access denied for bs1, repository does not exist or may require ‘docker login’: denied: requested access to the resource is denied.</p><pre class="line-numbers language-none"><code class="language-none">docker container restart 容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h4 id="docker容器跑着会突然挂掉"><a href="#docker容器跑着会突然挂掉" class="headerlink" title="docker容器跑着会突然挂掉"></a>docker容器跑着会突然挂掉</h4></li></ul><pre class="line-numbers language-none"><code class="language-none">docker 容器默认会把容器内部第一个进程，也就是pid=1的程序作为docker容器是否正在运行的依据，如果docker 容器pid挂了，那么docker容器便会直接退出。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h4 id="docker运行nginx要使用-nginx-g-‘daemon-off-’"><a href="#docker运行nginx要使用-nginx-g-‘daemon-off-’" class="headerlink" title="docker运行nginx要使用 nginx -g ‘daemon off;’"></a>docker运行nginx要使用 nginx -g ‘daemon off;’</h4></li></ul><p>docker run的时候把command最为容器内部命令，如果你使用nginx，那么nginx程序将后台运行，这个时候nginx并不是pid为1的程序，而是执行的bash，这个bash执行了nginx指令后就挂了，所以容器也就退出了</p><p>Docker 容器启动时，默认会把容器内部第一个进程，也就是<code>pid=1</code>的程序，作为docker容器是否正在运行的依据，如果 docker 容器pid=1的进程挂了，那么docker容器便会直接退出。</p><p>Docker未执行自定义的CMD之前，nginx的pid是1，执行到CMD之后，nginx就在后台运行，bash或sh脚本的pid变成了1。</p><p>所以一旦执行完自定义CMD，nginx容器也就退出了。</p><h2 id="十一、其他知识点"><a href="#十一、其他知识点" class="headerlink" title="十一、其他知识点"></a>十一、其他知识点</h2><ul><li><h4 id="docker和docker-compose的区别"><a href="#docker和docker-compose的区别" class="headerlink" title="docker和docker-compose的区别"></a>docker和docker-compose的区别</h4></li></ul><p>Docker-Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。 Docker-Compose将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）。Docker-Compose运行目录下的所有文件（docker-compose.yml，extends文件或环境变量文件等）组成一个工程，若无特殊指定工程名即为当前目录名。一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。一个服务当中可包括多个容器实例，Docker-Compose并没有解决负载均衡的问题，因此需要借助其它工具实现服务发现及负载均衡。 Docker-Compose的工程配置文件默认为docker-compose.yml，可通过环境变量COMPOSE_FILE或-f参数自定义配置文件，其定义了多个有依赖关系的服务及每个服务运行的容器。 使用一个Dockerfile模板文件，可以让用户很方便的定义一个单独的应用容器。在工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个Web项目，除了Web服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。 Compose允许用户通过一个单独的docker-compose.yml模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。 Docker-Compose项目由Python编写，调用Docker服务提供的API来对容器进行管理。因此，只要所操作的平台支持Docker API，就可以在其上利用Compose来进行编排管理。</p><p><strong>docker</strong> 管理单个容器</p><p><strong>docker-compose</strong> 管理多个容器应用程序</p><p>使用docker-compose需要3个步骤：</p><ol><li>使用 <strong>Dockerfile</strong> 定义应用程序环境</li><li>在 <strong>docker-compose.yml</strong> 中定义应用服务</li><li>运行 <strong>docker-compose up</strong> 以启动并运行应用程序</li></ol><ul><li><h4 id="docker-compose常用命令"><a href="#docker-compose常用命令" class="headerlink" title="docker-compose常用命令"></a>docker-compose常用命令</h4></li></ul><ol><li>在后台启动容器并使它们保持运行</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>启动容器其中一个程序,例：nginx</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose up -d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>登陆到nginx程序</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose exec nginx bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>删除所有镜像</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>重启容器，例nginx</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>构建镜像，例nginx</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose build nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>构建不带缓存的镜像，例nginx</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose build --no-cache nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>查看该容器的启动的日志打印</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose logs -f  容器名称或id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>停止compose服务</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose stop 容器名称或id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>重启compose服务</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose restart 容器名称或id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>kill compose服务</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose kill  容器名称或id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>查看compose服务状态</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>删除compose服务</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose rm  容器名称或id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>暂停容器使用，例ngixn</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose pause nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>回复容器使用，例nginx</li></ol><pre class="line-numbers language-none"><code class="language-none">docker-compose unpause nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes部署指南v1.20.x</title>
      <link href="/2022/03/01/k8s/kubernetes-bu-shu-zhi-nan-v1.20.x/"/>
      <url>/2022/03/01/k8s/kubernetes-bu-shu-zhi-nan-v1.20.x/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础环境准备"><a href="#一、基础环境准备" class="headerlink" title="一、基础环境准备"></a>一、基础环境准备</h2><blockquote><p>2台独立ng配合keepalived做主备，3台master做后段负载均衡，node随意</p></blockquote><p>1、 所有集群节点关防火墙，关swap，关selinux，调整内核参数，配置ntp或者chronyd</p><pre class="line-numbers language-none"><code class="language-none">~$ systemctl stop firewalld &amp;&amp; systemctl disable firewalld~$ swapoff -a~$ sed -i '/swap/d' /etc/fstab~$ setenfore 0~$ sed  's/^SELINUX=.*$/SELINUX=disabled/g' /etc/selinux/config# 内核参数没有设置或者漏设置的话，在kubeadm init或者join的时候，预检查会提示waring，之后再补充修改即可~$ cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_nonlocal_bind = 1net.ipv4.ip_forward = 1EOF~$ sysctl -p /etc/sysctl.d/k8s.conf# ntp配置不再赘述<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、 所有集群节点配置docker yum源，kubernetes yum源，安装kubelet，kubeadm，docker-ce</p><pre class="line-numbers language-none"><code class="language-none"># 选择指定版本安装，安装完成后先不要启动任何服务~$ yum list docker-ce或者kubelet或者kubeadm --showduplicate  | sort -r~$ yum install 软件包名-版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、 配置docker</p><pre class="line-numbers language-none"><code class="language-none"># 这里把docker cgroup驱动设置为systemd，性能比默认的cgroupfs要好，这里一定要在初始化集群之前设置，如果在之后设置，kubelet和docker的驱动不一致。会导致容器起不起来~$ cat &gt; /etc/docker/daemon.json &lt;&lt; EOF{  "exec-opts": ["native.cgroupdriver=systemd"],  "log-driver": "json-file",  "log-opts": {    "max-size": "100m"  },  "storage-driver": "overlay2",  "storage-opts": [    "overlay2.override_kernel_check=true"  ]}EOF# 根据需要修改docker数据存储根目录，可以从daemon.json、docker service设置，也可以用软链目录来设置，这里介绍下软链~$ ln -s /data/docker /var/lib/docker# 配置完成后启动docker~$ systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、kubernetes镜像准备（<strong>假设harbor地址为harbor.foo.com，项目为image</strong>）</p><pre class="line-numbers language-none"><code class="language-none"># 能通公网的情况下，忽略这步。内网环境里，最好有个harbor，然后把下下来的镜像全部传到harbor，方便后续集群初始化。下面从一台能通公网的机器上先pull下来镜像再传到harbor上docker pull registry.aliyuncs.com/google_containers/kube-proxy:v1.20.7docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.20.7docker pull registry.aliyuncs.com/google_containers/kube-controller-manager:v1.20.7docker pull registry.aliyuncs.com/google_containers/kube-scheduler:v1.20.7docker pull registry.aliyuncs.com/google_containers/etcd:3.4.13-0docker pull registry.aliyuncs.com/google_containers/coredns:1.7.0docker pull registry.aliyuncs.com/google_containers/pause:3.2# 下完之后打tag传到harbor上，过程不再赘述<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>到此基础环境配置完成，下面开始操作集群</p></blockquote><h2 id="二、操作Nginx"><a href="#二、操作Nginx" class="headerlink" title="二、操作Nginx"></a>二、操作Nginx</h2><p>1、配置ng+keepalived（<strong>假设vip地址为192.168.0.100，3台master地址为192.168.0.1/2/3</strong>）</p><pre class="line-numbers language-none"><code class="language-none"># keepalived这里采用的是双backup，nopreempt模式，所以两台配置文件都一样，配置不再赘述，直接贴配置~$ cat /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs {   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server 192.168.200.1   smtp_connect_timeout 30   router_id k8s   vrrp_skip_check_adv_addr   vrrp_strict   vrrp_garp_interval 0   vrrp_gna_interval 0}vrrp_instance VI_1 {    state BACKUP    nopreempt    interface ens192    virtual_router_id 51    priority 100    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {        192.168.0.100/24  #需要修改为vip地址    }    track_script {        check_nginx    }}vrrp_script check_nginx {    script "/etc/keepalived/check_nginx.sh"    interval 3    weight -2    fall 10    rise 2}~$ cat /etc/keepalived/check_nginx.sh #需要可执行权限#!/bin/bashA=`ps -C nginx --no-header | wc -l`if [ $A -eq 0 ];then  systmectl start nginx  if [ ps -C nginx --no-header | wc -l -eq 0 ];then    killall -9 nginx    sleep 3600  fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、ng一定要配置**<code>四层代理</code>**，因为kubectl和kubelet到apiserver的通信是tcp通信，不是http</p><pre class="line-numbers language-none"><code class="language-none">stream {    #stream块包住server和upstream  upstream apiserver {    server 192.168.0.1:6443;    server 192.168.0.2:6443;    server 192.168.0.3:6443;  }  server {    listen 6443;    proxy_pass apiserver;  #注意master之前一定不能带http://，不然就是7层代理  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>到此ng配置完成，在操作k8s集群节点之前需要测试下到ng vip的6443端口通信，确保没问题再进行下一步</p></blockquote><h2 id="三、操作k8s集群"><a href="#三、操作k8s集群" class="headerlink" title="三、操作k8s集群"></a>三、操作k8s集群</h2><p>1、初始化单台master集群</p><pre class="line-numbers language-none"><code class="language-none"># 这里需要注意的地方比较多，首先--control-plane-endpoint后面一定跟的ng的VIP，不然高可用apiserver就没生效# 如果机器能通公网，--image-repository后面写registry.aliyuncs.com/google_containers# --kubernetes-version：选择指定版本# --pod-network-cidr：设置pod网络的网段，后期可以通过cni插件覆盖修改# --apiserver-cert-extra-sans：把另外的master地址写上，不然之后初始化别的master时候会报错，提示该节点没有资格成为master~$ kubeadm init  \--control-plane-endpoint 172.21.32.200:6443 \--image-repository harbor.foo.com/image \--kubernetes-version v1.20.7 \--pod-network-cidr 10.21.0.0/16 \--apiserver-cert-extra-sans 172.21.32.132,172.21.32.133<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化完成后按照提示设置.kube目录即可，复制下来提示的kube join命令，如果忘记了，按照下面的方法再生成一次</p></blockquote><pre class="line-numbers language-none"><code class="language-none">~$ kubeadm token create8vxuo1.hwwk3y0f4iu5ok5c~$ openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2&gt;/dev/null | sha256sum | cut -d' ' -f1  #计算master ca证书的hash值，后面在join的时候node会去用这个验证master身份6b6436977504ee060e52b1a99a98b4e057f4dc07b9aa15c37cbe33d9435784b8# 完整的命令如下，保存好接下来会用到  kubeadm join 192.168.0.100:6443 \  --token 8vxuo1.hwwk3y0f4iu5ok5c \  --discovery-token-ca-cert-hash sha256:6b6436977504ee060e52b1a99a98b4e057f4dc07b9aa15c37cbe33d9435784b8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、初始化其余的master<strong>（以master2为例）</strong></p><pre class="line-numbers language-none"><code class="language-none"># 把master1的证书传输到其余的master上，需要root互信，在master1上操作~$ cat other-master-ip.txt192.168.0.2192.168.0.3~$ for i in `cat other-master-ip.txt`; do ssh $i mkdir -p /etc/kubernetes/pki/etcd/; done~$ for i in `cat other-master-ip.txt`; do scp /etc/kubernetes/pki/ca.* $i:/etc/kubernetes/pki/; done~$ for i in `cat other-master-ip.txt`; do scp /etc/kubernetes/pki/front* $i:/etc/kubernetes/pki/; done~$ for i in `cat other-master-ip.txt`; do scp /etc/kubernetes/pki/sa.* $i:/etc/kubernetes/pki/; done~$ for i in `cat other-master-ip.txt`; do scp /etc/kubernetes/pki/etcd/ca* $i:/etc/kubernetes/pki/etcd/; done~$ for i in `cat other-master-ip.txt`; do scp /etc/kubernetes/admin.conf $i:/etc/kubernetes/; done~$ kubeadm join 192.168.0.100:6443 \--token 8vxuo1.hwwk3y0f4iu5ok5c \--discovery-token-ca-cert-hash sha256:6b6436977504ee060e52b1a99a98b4e057f4dc07b9aa15c37cbe33d9435784b8 \--control-plane \  # 以控制平面的身份加入集群，如果没有这条参数就是以普通node的身份加入集群--node-name master2 # 可选参数，设置主机名，没有该参数，kubectl get nodes显示出来的就是主机hostname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、初始化node</p><pre class="line-numbers language-none"><code class="language-none"># 在node节点上执行~$ kubeadm join 192.168.0.100:6443 \--token 8vxuo1.hwwk3y0f4iu5ok5c \--discovery-token-ca-cert-hash sha256:6b6436977504ee060e52b1a99a98b4e057f4dc07b9aa15c37cbe33d9435784b8 \--node-name node1  # 可选参数，设置主机名，没有该参数，kubectl get nodes显示出来的就是主机hostname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、cni插件的安装</p><p>略</p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 开始日期和结束日期的所有日期列表</title>
      <link href="/2022/02/28/go/go-kai-shi-ri-qi-he-jie-shu-ri-qi-de-suo-you-ri-qi-lie-biao/"/>
      <url>/2022/02/28/go/go-kai-shi-ri-qi-he-jie-shu-ri-qi-de-suo-you-ri-qi-lie-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-开始日期和结束日期的所有日期列表"><a href="#Go-开始日期和结束日期的所有日期列表" class="headerlink" title="Go 开始日期和结束日期的所有日期列表"></a>Go 开始日期和结束日期的所有日期列表</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// GetBetweenDates 根据开始日期和结束日期计算出时间段内所有日期</span><span class="token comment">// 参数为日期格式，如：2020-01-01</span><span class="token keyword">func</span> <span class="token function">GetBetweenDates</span><span class="token punctuation">(</span>sdate<span class="token punctuation">,</span> edate <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>d <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>timeFormatTpl <span class="token operator">:=</span> <span class="token string">"2006-01-02 15:04:05"</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>timeFormatTpl<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>sdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>timeFormatTpl <span class="token operator">=</span> timeFormatTpl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>sdate<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span>date<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>timeFormatTpl<span class="token punctuation">,</span> sdate<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">// 时间解析，异常</span><span class="token keyword">return</span> d<span class="token punctuation">}</span>date2<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>timeFormatTpl<span class="token punctuation">,</span> edate<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">// 时间解析，异常</span><span class="token keyword">return</span> d<span class="token punctuation">}</span><span class="token keyword">if</span> date <span class="token operator">==</span> date2 <span class="token punctuation">{</span>d <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> d<span class="token punctuation">}</span><span class="token keyword">if</span> date2<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果结束时间小于开始时间，异常</span><span class="token keyword">return</span> d<span class="token punctuation">}</span><span class="token comment">// 输出日期格式固定</span>timeFormatTpl <span class="token operator">=</span> <span class="token string">"2006-01-02"</span>date2Str <span class="token operator">:=</span> date2<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>timeFormatTpl<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>timeFormatTpl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>date <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">AddDate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>dateStr <span class="token operator">:=</span> date<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>timeFormatTpl<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> dateStr<span class="token punctuation">)</span><span class="token keyword">if</span> dateStr <span class="token operator">==</span> date2Str <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> d<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：<a href="https://www.cnblogs.com/xuweiqiang/p/12192889.html">https://www.cnblogs.com/xuweiqiang/p/12192889.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go ssh用法</title>
      <link href="/2022/02/28/go/go-ssh-yong-fa/"/>
      <url>/2022/02/28/go/go-ssh-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="crypto-ssh用法"><a href="#crypto-ssh用法" class="headerlink" title="crypto/ssh用法"></a>crypto/ssh用法</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span>gossh <span class="token string">"golang.org/x/crypto/ssh"</span><span class="token string">"net"</span><span class="token punctuation">)</span> <span class="token comment">// 连接信息</span><span class="token keyword">type</span> Cli <span class="token keyword">struct</span> <span class="token punctuation">{</span>User       <span class="token builtin">string</span>Pwd        <span class="token builtin">string</span>Addr       <span class="token builtin">string</span>Client     <span class="token operator">*</span>gossh<span class="token punctuation">.</span>ClientSession    <span class="token operator">*</span>gossh<span class="token punctuation">.</span>SessionLastResult <span class="token builtin">string</span>Key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">}</span><span class="token comment">// 连接对象</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cli<span class="token punctuation">)</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Cli<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>config <span class="token operator">:=</span> <span class="token operator">&amp;</span>gossh<span class="token punctuation">.</span>ClientConfig<span class="token punctuation">{</span><span class="token punctuation">}</span>config<span class="token punctuation">.</span><span class="token function">SetDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>config<span class="token punctuation">.</span>User <span class="token operator">=</span> c<span class="token punctuation">.</span>User<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Key<span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">{</span>key<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>gossh<span class="token punctuation">.</span><span class="token function">ParsePrivateKey</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>config<span class="token punctuation">.</span>Auth <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>gossh<span class="token punctuation">.</span>AuthMethod<span class="token punctuation">{</span>gossh<span class="token punctuation">.</span><span class="token function">PublicKeys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment">// 免密</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>config<span class="token punctuation">.</span>Auth <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>gossh<span class="token punctuation">.</span>AuthMethod<span class="token punctuation">{</span>gossh<span class="token punctuation">.</span><span class="token function">Password</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Pwd<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>config<span class="token punctuation">.</span>HostKeyCallback <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>hostname <span class="token builtin">string</span><span class="token punctuation">,</span> remote net<span class="token punctuation">.</span>Addr<span class="token punctuation">,</span> key gossh<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token punctuation">}</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> gossh<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Addr<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token boolean">nil</span> <span class="token operator">!=</span> err <span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token punctuation">,</span> err<span class="token punctuation">}</span>c<span class="token punctuation">.</span>Client <span class="token operator">=</span> client<span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// 执行shell</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Cli<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>shell <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>Client <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token punctuation">}</span>session<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// 关闭会话</span><span class="token keyword">defer</span> session<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> err <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">CombinedOutput</span><span class="token punctuation">(</span>shell<span class="token punctuation">)</span>c<span class="token punctuation">.</span>LastResult <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>LastResult<span class="token punctuation">,</span> err<span class="token punctuation">}</span>   <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cli <span class="token operator">:=</span> Cli<span class="token punctuation">{</span>addr<span class="token punctuation">:</span> <span class="token string">"127.0.0.1:22"</span><span class="token punctuation">,</span>user<span class="token punctuation">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>pwd<span class="token punctuation">:</span>  <span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>    <span class="token comment">// 建立连接对象</span>c<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 退出时关闭连接</span>    <span class="token keyword">defer</span> c<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span>res1 <span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：</p><p><a href="https://blog.csdn.net/weixin_42662249/article/details/115393695">https://blog.csdn.net/weixin_42662249/article/details/115393695</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go gin全局统一错误处理</title>
      <link href="/2022/02/28/go/gin/go-gin-quan-ju-tong-yi-cuo-wu-chu-li/"/>
      <url>/2022/02/28/go/gin/go-gin-quan-ju-tong-yi-cuo-wu-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="gin全局统一错误处理"><a href="#gin全局统一错误处理" class="headerlink" title="gin全局统一错误处理"></a>gin全局统一错误处理</h1><h2 id="简单的错误格式"><a href="#简单的错误格式" class="headerlink" title="简单的错误格式"></a>简单的错误格式</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span>    <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Not Found"</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注册方法"><a href="#注册方法" class="headerlink" title="注册方法"></a>注册方法</h2><p>404的时候用该方法，NoMethod和NoRoute为gin提供，详细看源代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">NoMethod</span><span class="token punctuation">(</span>HandleNotFound<span class="token punctuation">)</span>  <span class="token comment">// 没有对应method的时候使用这个方法</span>    r<span class="token punctuation">.</span><span class="token function">NoRoute</span><span class="token punctuation">(</span>HandleNotFound<span class="token punctuation">)</span>   <span class="token comment">// 没有对应路由的时候使用这个方法</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/ping"</span><span class="token punctuation">,</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 在 0.0.0.0:8080 上监听并服务</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写统一错误方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">HandleNotFound</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"msg"</span><span class="token punctuation">:</span>  <span class="token string">"failed"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：<a href="https://zhuanlan.zhihu.com/p/76967528">https://zhuanlan.zhihu.com/p/76967528</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go gin获取参数</title>
      <link href="/2022/02/28/go/gin/go-gin-huo-qu-can-shu/"/>
      <url>/2022/02/28/go/gin/go-gin-huo-qu-can-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="gin获取参数"><a href="#gin获取参数" class="headerlink" title="gin获取参数"></a>gin获取参数</h1><h2 id="获取Get参数"><a href="#获取Get参数" class="headerlink" title="获取Get参数"></a>获取Get参数</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">firstname <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">"firstname"</span><span class="token punctuation">,</span> <span class="token string">"Guest"</span><span class="token punctuation">)</span>  <span class="token comment">// 获取参数，设置默认值</span>lastname <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"lastname"</span><span class="token punctuation">)</span>  <span class="token comment">// 获取参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取Post参数"><a href="#获取Post参数" class="headerlink" title="获取Post参数"></a>获取Post参数</h2><h3 id="form类型"><a href="#form类型" class="headerlink" title="form类型"></a>form类型</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">message <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>  <span class="token comment">// 获取参数</span>nick <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultPostForm</span><span class="token punctuation">(</span><span class="token string">"nick"</span><span class="token punctuation">,</span> <span class="token string">"anonymous"</span><span class="token punctuation">)</span>  <span class="token comment">// 获取参数，设置默认值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="body类型"><a href="#body类型" class="headerlink" title="body类型"></a>body类型</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">b<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetRawData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 定义map或结构体</span><span class="token boolean">_</span> <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span>  <span class="token comment">// 反序列化</span>message <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>引用：<a href="https://www.kancloud.cn/shuangdeyu/gin_book/949417">https://www.kancloud.cn/shuangdeyu/gin_book/949417</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go time用法</title>
      <link href="/2022/02/23/go/go-time-yong-fa/"/>
      <url>/2022/02/23/go/go-time-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="time方法"><a href="#time方法" class="headerlink" title="time方法"></a>time方法</h1><h2 id="获取当前时间戳"><a href="#获取当前时间戳" class="headerlink" title="获取当前时间戳"></a>获取当前时间戳</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">timeUnix <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">//单位秒</span>timeUnixNano <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//单位纳秒</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>timeUnix<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>timeUnixNano<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Time </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 将数据库中单表转成csv文件输出</title>
      <link href="/2022/02/23/go/go-jiang-shu-ju-ku-zhong-dan-biao-zhuan-cheng-csv-wen-jian-shu-chu/"/>
      <url>/2022/02/23/go/go-jiang-shu-ju-ku-zhong-dan-biao-zhuan-cheng-csv-wen-jian-shu-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="将数据库中单表转成csv文件输出"><a href="#将数据库中单表转成csv文件输出" class="headerlink" title="将数据库中单表转成csv文件输出"></a>将数据库中单表转成csv文件输出</h1><p>获取查询数据的每行信息，并写到csv文件里</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Csv</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> db <span class="token operator">=</span> models<span class="token punctuation">.</span>DBd <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>TNodeRecord<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>columns<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//values：一行的所有值，长度==列数</span>values <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>sql<span class="token punctuation">.</span>RawBytes<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>columns<span class="token punctuation">)</span><span class="token punctuation">)</span>scanArgs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">{</span>scanArgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span>totalValues <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>err <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>scanArgs<span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">//把每行的内容添加到scanArgs，也添加到了values</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">{</span>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// print(len(s))</span><span class="token punctuation">}</span>totalValues <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>totalValues<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>fileName <span class="token operator">:=</span> <span class="token string">"data.csv"</span><span class="token function">writeToCSV</span><span class="token punctuation">(</span><span class="token string">"cache/"</span><span class="token operator">+</span>fileName<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> totalValues<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Transfer-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"binary"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"cache/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">writeToCSV</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">,</span> columns <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> totalValues <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>f<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"\xEF\xBB\xBF"</span><span class="token punctuation">)</span><span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w <span class="token operator">:=</span> csv<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">for</span> a<span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> totalValues <span class="token punctuation">{</span><span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>columns<span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// fmt.Println(i)</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>w<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"处理完毕："</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：<a href="https://www.cnblogs.com/muyuxiaoxian/p/15161616.html">https://www.cnblogs.com/muyuxiaoxian/p/15161616.html</a></p><p><a href="https://www.cnblogs.com/zhangjian0092/p/12566640.html">https://www.cnblogs.com/zhangjian0092/p/12566640.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> csv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go类型转换</title>
      <link href="/2022/02/23/go/go-lei-xing-zhuan-huan/"/>
      <url>/2022/02/23/go/go-lei-xing-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="各个类型转换"><a href="#各个类型转换" class="headerlink" title="各个类型转换"></a>各个类型转换</h1><h2 id="string转成int"><a href="#string转成int" class="headerlink" title="string转成int"></a>string转成int</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="string转成int64"><a href="#string转成int64" class="headerlink" title="string转成int64"></a>string转成int64</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="int转成string"><a href="#int转成string" class="headerlink" title="int转成string"></a>int转成string</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">string</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="int64转成string"><a href="#int64转成string" class="headerlink" title="int64转成string"></a>int64转成string</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">string</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go strings用法</title>
      <link href="/2022/01/18/go/go-strings-yong-fa/"/>
      <url>/2022/01/18/go/go-strings-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="strings内置方法"><a href="#strings内置方法" class="headerlink" title="strings内置方法"></a>strings内置方法</h1><h2 id="FieldsFunc"><a href="#FieldsFunc" class="headerlink" title="FieldsFunc"></a>FieldsFunc</h2><p><code>strings.FieldsFunc()</code> Golang中的函数用于在每次运行的满足f(c)的Unicode代码点c处拆分给定的字符串str，并返回由str组成的切片数组。</p><h3 id="去数字"><a href="#去数字" class="headerlink" title="去数字"></a>去数字</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">f<span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> unicode<span class="token punctuation">.</span><span class="token function">IsSpace</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Fields are:%q\n"</span><span class="token punctuation">,</span>      strings<span class="token punctuation">.</span><span class="token function">FieldsFunc</span><span class="token punctuation">(</span><span class="token string">"ABC123PQR456XYZ789"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="去空格"><a href="#去空格" class="headerlink" title="去空格"></a>去空格</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Fields are: %q"</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">FieldsFunc</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> unicode<span class="token punctuation">.</span>IsSpace<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">context <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span><span class="token string">"zhangsan lisi wanger"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"context[0] is: %s\n"</span><span class="token punctuation">,</span> context<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"context[1] is: %s\n"</span><span class="token punctuation">,</span> context<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"context[2] is: %s\n"</span><span class="token punctuation">,</span> context<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"context is: %s\n"</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：</p><p><a href="https://vimsky.com/examples/usage/strings-fieldsfunc-function-in-golang-with-examples.html">https://vimsky.com/examples/usage/strings-fieldsfunc-function-in-golang-with-examples.html</a></p><p><a href="https://www.imooc.com/wenda/detail/417819">https://www.imooc.com/wenda/detail/417819</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Strings </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go cron使用</title>
      <link href="/2022/01/17/go/go-crontab-shi-yong/"/>
      <url>/2022/01/17/go/go-crontab-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>go get "github.com/robfig/cron/v3"</code></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>调用<code>cron</code>对象的<code>AddFunc()</code>方法向管理器中添加定时任务。<code>AddFunc()</code>接受两个参数，参数 1 以字符串形式指定触发时间规则，参数 2 是一个无参的函数，每次触发时调用。<code>@every 1s</code>表示每秒触发一次，<code>@every</code>后加一个时间间隔，表示每隔多长时间触发一次。例如<code>@every 1h</code>表示每小时触发一次，<code>@every 1m2s</code>表示每隔 1 分 2 秒触发一次。<code>time.ParseDuration()</code>支持的格式都可以用在这里。</p><p>调用<code>c.Start()</code>启动定时循环。</p><p>注意一点，因为<code>c.Start()</code>启动一个新的 <code>goroutine</code> 做循环检测，我们在代码最后加了一行<code>time.Sleep(time.Second * 5)</code>防止主 <code>goroutine</code> 退出。</p><p>运行效果，每隔 1s 输出一行字符串：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  c <span class="token operator">:=</span> cron<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  c<span class="token punctuation">.</span><span class="token function">AddFunc</span><span class="token punctuation">(</span><span class="token string">"@every 1s"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tick every 1 second"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  c<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 阻塞，或者使用其他延迟时间函数、</span>  <span class="token keyword">select</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 或者</span>  <span class="token keyword">for</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预定义时间规则"><a href="#预定义时间规则" class="headerlink" title="预定义时间规则"></a>预定义时间规则</h2><p>为了方便使用，cron预定义了一些时间规则：</p><ul><li>@yearly：也可以写作@annually，表示每年第一天的 0 点。等价于0 0 1 1 *；</li><li>@monthly：表示每月第一天的 0 点。等价于0 0 1 * *；</li><li>@weekly：表示每周第一天的 0 点，注意第一天为周日，即周六结束，周日开始的那个 0 点。等价于0 0 * * 0；</li><li>@daily：也可以写作@midnight，表示每天 0 点。等价于0 0 * * *；</li><li>@hourly：表示每小时的开始。等价于0 * * * *。</li></ul><p>引用：</p><p><a href="https://www.jianshu.com/p/fd3dda663953">https://www.jianshu.com/p/fd3dda663953</a></p><p><a href="https://www.cnblogs.com/niuben/p/14615806.html">https://www.cnblogs.com/niuben/p/14615806.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> cron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go BoltDB使用</title>
      <link href="/2022/01/14/go/go-boltdb-shi-yong/"/>
      <url>/2022/01/14/go/go-boltdb-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="BoltDB简介"><a href="#BoltDB简介" class="headerlink" title="BoltDB简介"></a>BoltDB简介</h1><p>Bolt是一个纯粹Key/Value模型的程序。该项目的目标是为不需要完整数据库服务器（如Postgres或MySQL）的项目提供一个简单，快速，可靠的数据库。</p><p>BoltDB只需要将其链接到你的应用程序代码中即可使用BoltDB提供的API来高效的存取数据。而且BoltDB支持完全可序列化的ACID事务，让应用程序可以更简单的处理复杂操作。</p><p>其源码地址为:<strong><a href="https://github.com/boltdb/bolt">https://github.com/boltdb/bolt</a></strong></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>go get "github.com/boltdb/bolt"</code></p><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">db<span class="token punctuation">,</span> err <span class="token operator">:=</span> bolt<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  <span class="token comment">// DB文件名</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打开-创建数据库表"><a href="#打开-创建数据库表" class="headerlink" title="打开/创建数据库表"></a>打开/创建数据库表</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>bucket<span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">CreateBucketIfNotExists</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 表名</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"create bucket: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>err <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"key名"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"value值"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// key名，value值</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看数据库表"><a href="#查看数据库表" class="headerlink" title="查看数据库表"></a>查看数据库表</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>bucket <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 表名</span><span class="token keyword">if</span> bucket <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"错误信息"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>val <span class="token operator">:=</span> bucket<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"key名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// key名，这里获取的val是字节类型</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：</p><p><a href="https://www.debugger.wiki/article/html/1555948800457626">https://www.debugger.wiki/article/html/1555948800457626</a></p><p><a href="https://blog.csdn.net/neweastsun/article/details/106886466">https://blog.csdn.net/neweastsun/article/details/106886466</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> BoltDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go操作elasticsearch</title>
      <link href="/2022/01/13/go/go-cao-zuo-elasticsearch/"/>
      <url>/2022/01/13/go/go-cao-zuo-elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="Go操作elasticsearch"><a href="#Go操作elasticsearch" class="headerlink" title="Go操作elasticsearch"></a>Go操作elasticsearch</h1><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p><code>"github.com/olivere/elastic/v7"</code></p><p>ES版本7的用v7的包，版本6的用v6的包</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>声明client类型</p><p><code>var client *elastic.Client</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">errorlog <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"ELASTIC"</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token punctuation">)</span>client<span class="token punctuation">,</span> err <span class="token operator">=</span> elastic<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token comment">//  elastic.SetSniff(true),      //是否开启集群嗅探</span><span class="token comment">//elastic.SetHealthcheckInterval(10 * time.Second), //设置两次运行状况检查之间的间隔, 默认60s</span><span class="token comment">//elastic.SetGzip(false),  //启用或禁用gzip压缩</span><span class="token comment">//elastic.SetInfoLog(log.New(os.Stdout, "", log.LstdFlags)),  //INFO级别日志输出配置</span>    elastic<span class="token punctuation">.</span><span class="token function">SetErrorLog</span><span class="token punctuation">(</span>errorlog<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 设置error日志输出格式</span>    elastic<span class="token punctuation">.</span><span class="token function">SetURL</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:9200"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// Es url </span>    elastic<span class="token punctuation">.</span><span class="token function">SetBasicAuth</span><span class="token punctuation">(</span>        <span class="token string">"xxx"</span><span class="token punctuation">,</span>   <span class="token comment">// 账号</span>        <span class="token string">"xxxxxx"</span><span class="token punctuation">)</span>  <span class="token comment">// 密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看连接状态"><a href="#查看连接状态" class="headerlink" title="查看连接状态"></a>查看连接状态</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">info<span class="token punctuation">,</span> code<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span>    <span class="token string">"http://127.0.0.1:9200"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">esversion<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">ElasticsearchVersion</span><span class="token punctuation">(</span>    <span class="token string">"http://127.0.0.1:9200"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="创建-更新索引"><a href="#创建-更新索引" class="headerlink" title="创建/更新索引"></a>创建/更新索引</h2><h3 id="单条操作"><a href="#单条操作" class="headerlink" title="单条操作"></a>单条操作</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conf<span class="token punctuation">.</span><span class="token function">ES</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token string">"_doc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">// id为字符串, 创建一条此id的数据或覆盖已有此id的记录</span><span class="token comment">// data为结构体或map, 当然结构需要跟索引的mapping类型保持一致</span><span class="token function">Id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BodyJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">bulkRequest <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Bulk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>  <span class="token comment">// 索引名</span>doc <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewBulkIndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span>    <span class="token string">"xxx"</span>  <span class="token comment">// 文档id</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Doc</span><span class="token punctuation">(</span>    res  <span class="token comment">// 文档内容</span><span class="token punctuation">)</span>bulkRequest <span class="token operator">=</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>  <span class="token comment">// 添加到bulk批次里</span>bulkRequest<span class="token punctuation">.</span><span class="token function">NumberOfActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 查看bulk批次里文档数</span>bulkResponse<span class="token punctuation">,</span> err <span class="token operator">:=</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 执行提交bulk</span>bulkResponse<span class="token punctuation">.</span><span class="token function">Failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 查看提交失败的文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h2><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">boolQ <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewBoolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 声明条件</span>boolQ<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>  <span class="token comment">// filter筛选</span>    elastic<span class="token punctuation">.</span><span class="token function">NewRangeQuery</span><span class="token punctuation">(</span>        <span class="token string">"xxx"</span>  <span class="token comment">// key</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Gte</span><span class="token punctuation">(</span>  <span class="token comment">// 大于等于</span>        <span class="token string">"aaaa"</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lt</span><span class="token punctuation">(</span>  <span class="token comment">// 小于等于</span>        <span class="token string">"bbbb"</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryName</span><span class="token punctuation">(</span>        <span class="token string">"xxxx"</span>  <span class="token comment">// 字段</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="scroll查询"><a href="#scroll查询" class="headerlink" title="scroll查询"></a>scroll查询</h3><p>一次查询量过大，分批查询</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">do<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Scroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>    <span class="token string">"xxxx"</span>  <span class="token comment">// 索引名</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scroll</span><span class="token punctuation">(</span>    <span class="token string">"5s"</span>  <span class="token comment">// scroll每次查询内容保留时间</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>    boolQ  <span class="token comment">// 查询条件</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span>    <span class="token number">1000</span>  <span class="token comment">// scroll每次查询大小</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取返回scroll ID</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">scrollId <span class="token operator">:=</span> do<span class="token punctuation">.</span>ScrollId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基于scroll ID查询接下来内容</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">result<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Scroll</span><span class="token punctuation">(</span>    <span class="token string">"5s"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>    boolQ<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ScrollId</span><span class="token punctuation">(</span>    scrollId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除当前scroll ID，多scroll查询一定要清除</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">client<span class="token punctuation">.</span><span class="token function">ClearScroll</span><span class="token punctuation">(</span>do<span class="token punctuation">.</span>ScrollId<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引用：</p><p><a href="https://pkg.go.dev/github.com/olivere/elastic?utm_source=godoc">https://pkg.go.dev/github.com/olivere/elastic?utm_source=godoc</a></p><p><a href="https://blog.csdn.net/p1049990866/article/details/117254708">https://blog.csdn.net/p1049990866/article/details/117254708</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> elastic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KeepAlive部署</title>
      <link href="/2022/01/11/keepalived-bu-shu/"/>
      <url>/2022/01/11/keepalived-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、主节点"><a href="#一、主节点" class="headerlink" title="一、主节点"></a>一、主节点</h2><h3 id="安装keepalive"><a href="#安装keepalive" class="headerlink" title="安装keepalive"></a>安装keepalive</h3><p><code>yum -y install keepalived</code></p><p>或者</p><p>rpm包安装</p><p>1.<a href="https://centos.pkgs.org/7/centos-x86_64/">https://centos.pkgs.org/7/centos-x86_64/</a></p><p>到rpm网站下载包<code>net-snmp-libs-5.7.2-49.el7.x86_64.rpm</code>，<code>net-snmp-agent-libs-5.7.2-49.el7.x86_64.rpm</code>，<code>keepalived-1.3.5-19.el7.x86_64.rpm</code></p><pre class="line-numbers language-none"><code class="language-none">mkdir /toolsrz -be 包rpm -ivh  --replacefiles net-snmp-libs-5.7.2-49.el7.x86_64.rpmrpm -ivh  --replacefiles net-snmp-agent-libs-5.7.2-49.el7.x86_64.rpm rpm -ivh  --replacefiles keepalived-1.3.5-19.el7.x86_64.rpm <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改keepalive配置文件"><a href="#修改keepalive配置文件" class="headerlink" title="修改keepalive配置文件"></a>修改keepalive配置文件</h3><p>配置文件默认引用的<code>/etc/keepalived/keepalived.conf</code></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vi /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs { router_id nginx ##标识节点的字符串，通常为hostname}vrrp_script chk_nginx { script "/etc/keepalived/nginx_check.sh"  ##执行脚本位置 interval 2 ##检测时间间隔 weight -5 ## 如果条件成立则权重减5（-5） fall 3  ## 失败3次 rise 2  ## 尝试2次}## 定义虚拟路由 VI_1为自定义标识。vrrp_instance VI_1 {    state MASTER      ## 主节点为MASTER，备份节点为BACKUP    interface 网卡名(如：eth1)    mcast_src_ip 本机ip地址    virtual_router_id 51  ## 虚拟路由ID号，主从要一致    priority 100  ##优先级配置（0-254的值）    advert_int 2 ## 组播信息发送间隔，俩个节点必须配置一致，默认1s    authentication {        auth_type PASS        auth_pass 1111 ## 真实生产环境下对密码进行匹配    }    virtual_ipaddress {        虚拟ip地址(ping不通的同网段ip)/24    ## 虚拟ip(vip)，可以指定多个    }    track_script {      chk_nginx  ##vrrp_script 名    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新增判断脚本"><a href="#新增判断脚本" class="headerlink" title="新增判断脚本"></a>新增判断脚本</h3><p>这里用的是nginx判断脚本</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vi /etc/keepalived/nginx_check.sh#!/bin/bashA=`ps -C nginx --no-header |wc -l`if [ $A -eq 0 ];then    /tools/nginx/sbin/nginx     sleep 2    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then        killall keepalived    fifi[root@localhost ~]# chmod a+x nginx_check.sh  #要给脚本加执行权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启用keepalive"><a href="#启用keepalive" class="headerlink" title="启用keepalive"></a>启用keepalive</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl start keepalived[root@localhost ~]# ps -ef|grep keepaliveroot       31173       1  0 14:28 ?        00:00:02 /usr/sbin/keepalived -Droot       31174   31173  0 14:28 ?        00:00:02 /usr/sbin/keepalived -Droot       31175   31173  0 14:28 ?        00:00:08 /usr/sbin/keepalived -Droot       33249   29976  0 17:36 pts/1    00:00:00 grep --color=auto keepalive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、从节点"><a href="#二、从节点" class="headerlink" title="二、从节点"></a>二、从节点</h2><h3 id="keepallive配置修改"><a href="#keepallive配置修改" class="headerlink" title="keepallive配置修改"></a>keepallive配置修改</h3><p>其他部分与主节点一致</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vi /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs { router_id nginx ##标识节点的字符串，通常为hostname}vrrp_script chk_nginx { script "/etc/keepalived/nginx_check.sh"  ##执行脚本位置 interval 2 ##检测时间间隔 weight -5 ## 如果条件成立则权重减5（-5） fall 3  ## 失败3次 rise 2  ## 尝试2次}## 定义虚拟路由 VI_1为自定义标识。vrrp_instance VI_1 {    state BACKUP      ## 主节点为MASTER，备份节点为BACKUP    interface 网卡名(如：eth1)    mcast_src_ip 本机ip地址    virtual_router_id 51  ## 虚拟路由ID号，主从要一致    priority 99  ##优先级配置（0-254的值）    advert_int 2 ## 组播信息发送间隔，俩个节点必须配置一致，默认1s    authentication {        auth_type PASS        auth_pass 1111 ## 真实生产环境下对密码进行匹配    }    virtual_ipaddress {        虚拟ip地址(ping不通的同网段ip)/24    ## 虚拟ip(vip)，可以指定多个    }    track_script {      chk_nginx  ##vrrp_script 名    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><h3 id="查看虚拟ip"><a href="#查看虚拟ip" class="headerlink" title="查看虚拟ip"></a>查看虚拟ip</h3><p><code>ip a</code>查看vip是否已经有了</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ip a...2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    ...    inet 192.168.112.139/24 brd 192.168.112.255 scope global noprefixroute dynamic ens33       ...    inet 192.168.112.141/24 scope global secondary ens33 #vip...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keepalived判断脚本是nginx的，kill掉nginx后，再次查看主节点和从节点vip是否存在</p>]]></content>
      
      
      <categories>
          
          <category> KeepAlive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeepAlive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt窗口设置</title>
      <link href="/2022/01/09/qt/qt-chuang-kou-she-zhi/"/>
      <url>/2022/01/09/qt/qt-chuang-kou-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Qt窗口设置"><a href="#Qt窗口设置" class="headerlink" title="Qt窗口设置"></a>Qt窗口设置</h1><h2 id="窗口标题"><a href="#窗口标题" class="headerlink" title="窗口标题"></a>窗口标题</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>load<span class="token punctuation">.</span>setWindowFlags<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>FramelessWindowHint<span class="token punctuation">)</span> <span class="token comment"># 无边框加无状态栏</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="窗口透明"><a href="#窗口透明" class="headerlink" title="窗口透明"></a>窗口透明</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>load<span class="token punctuation">.</span>setAttribute<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>WA_TranslucentBackground<span class="token punctuation">)</span>  <span class="token comment"># 启用窗口透明</span>self<span class="token punctuation">.</span>load<span class="token punctuation">.</span>setWindowOpacity<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span>  <span class="token comment"># 透明度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Qt窗口点击事件"><a href="#Qt窗口点击事件" class="headerlink" title="Qt窗口点击事件"></a>Qt窗口点击事件</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyQuiLoader</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 重写QWidget类部分方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>isLeftPressed <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>mStartPoint <span class="token operator">=</span> self<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>buttons<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token punctuation">.</span>LeftButton<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>isLeftPressed <span class="token operator">=</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>mStartPoint <span class="token operator">=</span> event<span class="token punctuation">.</span>globalPos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>self<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>buttons<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token punctuation">.</span>LeftButton<span class="token punctuation">:</span>  <span class="token comment"># bug</span>            self<span class="token punctuation">.</span>isLeftPressed <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>isLeftPressed<span class="token punctuation">:</span>  <span class="token comment"># 左键按下</span>            self<span class="token punctuation">.</span>move<span class="token punctuation">(</span>event<span class="token punctuation">.</span>globalPos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>self<span class="token punctuation">.</span>mStartPoint<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Clock</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>load <span class="token operator">=</span> MyQuiLoader<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui <span class="token operator">=</span> QUiLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"ui/xxx.ui"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>load<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>透明</p><p><a href="https://blog.csdn.net/InTim/article/details/81513990">https://blog.csdn.net/InTim/article/details/81513990</a></p><p>左键移动</p><p><a href="https://blog.csdn.net/qq_45662588/article/details/121082278">https://blog.csdn.net/qq_45662588/article/details/121082278</a></p><p><a href="https://blog.csdn.net/fgh1991/article/details/89888002">https://blog.csdn.net/fgh1991/article/details/89888002</a></p><p>透明加左键移动</p><p><a href="https://blog.csdn.net/chlk118/article/details/39235153">https://blog.csdn.net/chlk118/article/details/39235153</a></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kind快速搭建Kubernetes</title>
      <link href="/2022/01/07/k8s/kind-kuai-su-da-jian-kubernetes/"/>
      <url>/2022/01/07/k8s/kind-kuai-su-da-jian-kubernetes/</url>
      
        <content type="html"><![CDATA[<h1 id="kind快速搭建Kubernetes"><a href="#kind快速搭建Kubernetes" class="headerlink" title="kind快速搭建Kubernetes"></a>kind快速搭建Kubernetes</h1><p>官方文档：<a href="https://kind.sigs.k8s.io/docs/user/quick-start/">https://kind.sigs.k8s.io/docs/user/quick-start/</a></p><h2 id="kind安装"><a href="#kind安装" class="headerlink" title="kind安装"></a>kind安装</h2><p>下载二进制文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64chmod +x ./kindmv ./kind /usr/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="部署单点"><a href="#部署单点" class="headerlink" title="部署单点"></a>部署单点</h2><p>使用 kind 创建 Kubernetes 集群非常的方便，只需要一行命令即可</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kind]# kind create clusterCreating cluster "kind" ... ✓ Ensuring node image (kindest/node:v1.21.1)  ✓ Preparing nodes    ✓ Writing configuration  ✓ Starting control-plane ️  ✓ Installing CNI  ✓ Installing StorageClass                             Set kubectl context to "kind-kind"You can now use your cluster with:kubectl cluster-info --context kind-kindThanks for using kind! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除集群</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kind delete cluster<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认集群名称是 “kind”，如果要创建多个或者指定集群名称，可以指定 name 参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kind create cluster --name<span class="token operator">=</span>k8s-cluster1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除集群</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kind delete cluster --name<span class="token operator">=</span>k8s-cluster1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看kind容器</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kind]# docker ps|grep kind289d71606549        kindest/node:v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6                "/usr/local/bin/en..."   3 minutes ago       Up 3 minutes        127.0.0.1:45171-&gt;6443/tcp   kind-control-plane<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时默认上下文是装好的kind</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tools]# kubectl get pods -ANAMESPACE            NAME                                         READY   STATUS    RESTARTS   AGEkube-system          coredns-558bd4d5db-92lpw                     1/1     Running   0          12mkube-system          coredns-558bd4d5db-fzx8r                     1/1     Running   0          12mkube-system          etcd-kind-control-plane                      1/1     Running   0          12mkube-system          kindnet-p88hk                                1/1     Running   0          12mkube-system          kube-apiserver-kind-control-plane            1/1     Running   0          12mkube-system          kube-controller-manager-kind-control-plane   1/1     Running   0          12mkube-system          kube-proxy-bv9mn                             1/1     Running   0          12mkube-system          kube-scheduler-kind-control-plane            1/1     Running   0          12mlocal-path-storage   local-path-provisioner-547f784dff-sn6p5      1/1     Running   0          12m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看已有上下文</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubectl config get-contexts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改上下文，切换集群</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubectl config  use-context kubernetes-admin@kubernetes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多集群创建"><a href="#多集群创建" class="headerlink" title="多集群创建"></a>多集群创建</h2><p>node版本：<a href="https://github.com/kubernetes-sigs/kind/releases">https://github.com/kubernetes-sigs/kind/releases</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Cluster<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kind.x<span class="token punctuation">-</span>k8s.io/v1alpha4<span class="token key atrule">nodes</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> control<span class="token punctuation">-</span>plane  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> worker  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> worker  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署引用yaml文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kind create cluster --name kind --config  cluster.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多集群创建-ingress"><a href="#多集群创建-ingress" class="headerlink" title="多集群创建-ingress"></a>多集群创建-ingress</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Cluster<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kind.x<span class="token punctuation">-</span>k8s.io/v1alpha4<span class="token key atrule">nodes</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> control<span class="token punctuation">-</span>plane  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4  <span class="token key atrule">kubeadmConfigPatches</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">    kind: InitConfiguration    nodeRegistration:      kubeletExtraArgs:        node-labels: "ingress-ready=true"</span>  <span class="token key atrule">extraPortMappings</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP  <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP<span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> worker  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> worker  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署引用yaml文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kind create cluster --name kind-ingress --config  cluster.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署ingress</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/kind/deploy.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引用：</p><p><a href="https://www.cnblogs.com/weihanli/p/12831225.html">https://www.cnblogs.com/weihanli/p/12831225.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/392209413">https://zhuanlan.zhihu.com/p/392209413</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> kind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubeadm部署</title>
      <link href="/2022/01/06/k8s/kubeadm-bu-shu/"/>
      <url>/2022/01/06/k8s/kubeadm-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h1><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 关闭防火墙systemctl stop firewalldsystemctl disable firewalld# 关闭selinuxsed -i 's/enforcing/disabled/' /etc/selinux/config  # 永久setenforce 0  # 临时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repoyum -y install docker-cesystemctl enable docker &amp;&amp; systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="安装Kubernetes"><a href="#安装Kubernetes" class="headerlink" title="安装Kubernetes"></a>安装Kubernetes</h1><h2 id="添加阿里云YUM的软件源"><a href="#添加阿里云YUM的软件源" class="headerlink" title="添加阿里云YUM的软件源"></a>添加阿里云YUM的软件源</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装kubeadm，kubelet和kubectl"><a href="#安装kubeadm，kubelet和kubectl" class="headerlink" title="安装kubeadm，kubelet和kubectl"></a>安装kubeadm，kubelet和kubectl</h2><p>这里安装的是最新版本</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">yum -y install kubelet-1.23.1 kubeadm-1.23.1 kubectl-1.23.1systemctl enable kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="部署Kubernetes-Master"><a href="#部署Kubernetes-Master" class="headerlink" title="部署Kubernetes Master"></a>部署Kubernetes Master</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubeadm init \--apiserver-advertise-address=10.0.4.2 \--image-repository registry.aliyuncs.com/google_containers \--kubernetes-version v1.23.1 \--service-cidr=10.1.0.0/16 \--pod-network-cidr=10.244.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果会有一串token</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/configAlternatively, if you are the root user, you can run:  export KUBECONFIG=/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can join any number of worker nodes by running the following on each as root:# node 加入主节点执行这条kubeadm join 10.0.4.2:6443 --token xxxxxx.1i07i2f7nrfdcqok \        --discovery-token-ca-cert-hash sha256:xxxxx86c3bc214140dece61119c56a46501fb7374cd6b06acca698c7d1bxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据提示执行</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>命令补全</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">source &lt;(kubectl completion bash) echo "source &lt;(kubectl completion bash)" &gt;&gt; ~/.bashrc#或alias k=kubectlsource &lt;(kubectl completion bash | sed s/kubectl/k/g)alias kcd='kubectl config set-context $(kubectl config current-context) --namespace'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加入Kubernetes-Node"><a href="#加入Kubernetes-Node" class="headerlink" title="加入Kubernetes Node"></a>加入Kubernetes Node</h2><p>在从节点上执行这条命令</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubeadm join 10.0.4.2:6443 --token xxxxxx.1i07i2f7nrfdcqok \        --discovery-token-ca-cert-hash sha256:xxxxx86c3bc214140dece61119c56a46501fb7374cd6b06acca698c7d1bxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装pod网络插件"><a href="#安装pod网络插件" class="headerlink" title="安装pod网络插件"></a>安装pod网络插件</h2><p>这里用的CNI是calico</p><p>文档：<a href="https://docs.projectcalico.org/getting-started/kubernetes/quickstart">https://docs.projectcalico.org/getting-started/kubernetes/quickstart</a></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https://docs.projectcalico.org/manifests/calico.yamlkubectl apply -f calico.yamlkubectl get pods -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h1><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改Svc为NodePod</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">vi recommended.yaml...kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  # 这里需要修改  selector:    k8s-app: kubernetes-dashboard  type: NodePort  # 这里需要修改...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">~]# kubectl apply -f recommended.yaml~]# kubectl get pods -n kubernetes-dashboardNAME                                         READY   STATUS    RESTARTS   AGEdashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          1mkubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          1m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：<a href="https://blog.csdn.net/weixin_48711696/article/details/114805048">https://blog.csdn.net/weixin_48711696/article/details/114805048</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用手册</title>
      <link href="/2022/01/06/git-shi-yong-shou-ce/"/>
      <url>/2022/01/06/git-shi-yong-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="Git用法"><a href="#Git用法" class="headerlink" title="Git用法"></a>Git用法</h1><h2 id="Git-clean"><a href="#Git-clean" class="headerlink" title="Git clean"></a>Git clean</h2><p><code>git clean -n</code>：是一次clean的演习, 告诉你哪些文件会被删除. 记住他不会真正的删除文件, 只是一个提醒</p><p><code>git clean -f</code>：删除当前目录下所有没有track过的文件. 他不会删除.gitignore文件里面指定的文件夹和文件, 不管这些文件有没有被track过</p><p><code>git clean -f &lt;path&gt;</code>：删除指定路径下的没有被track过的文件</p><p><code>git clean -df</code>：删除当前目录下没有被track过的文件和文件夹</p><p><code>git clean -xf</code>：删除当前目录下所有没有track过的文件. 不管他是否是.gitignore文件里面指定的文件夹和文件</p><h3 id="常见使用"><a href="#常见使用" class="headerlink" title="常见使用"></a>常见使用</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git reset --hardgit clean -df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行后, 工作目录和缓存区回到最近一次commit时候一摸一样的状态，git status会告诉你这是一个干净的工作目录, 又是一个新的开始了！</p><h2 id="Git-config"><a href="#Git-config" class="headerlink" title="Git config"></a>Git config</h2><p>配置各个环境</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git config --local 仓库级别配置文件git config --global 用户级别配置文件git config --system 系统级别配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git config --list</code>：查看配置</p><p><code>git config -e</code>：编辑配置</p><p><code>git config user.email "email@test.com"</code>：修改email</p><p><code>git config user.name "your name"</code>：修改name</p><p>或者直接修改<code>.git/config</code>配置文件</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="The-following-untracked-working-tree-files-would-be-overwritten-by-merge"><a href="#The-following-untracked-working-tree-files-would-be-overwritten-by-merge" class="headerlink" title="The following untracked working tree files would be overwritten by merge"></a>The following untracked working tree files would be overwritten by merge</h2><p>团队其他成员修改了某文件并已提交入库，你在pull之前修改了本地该文件，等你修改完代码再pull时，会报这个错</p><h3 id="保留修改"><a href="#保留修改" class="headerlink" title="保留修改"></a>保留修改</h3><p>执行以下三条命令</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git stash #封存修改git pull origin master git stash pop #把修改还原<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git stash</code>：备份当前工作区内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前工作区内容保存到Git栈中<br><code>git pull</code>：拉取服务器上当前分支代码<br><code>git stash pop</code>：从Git栈中读取最近一次保存的内容，恢复工作区相关内容。同时，用户可能进行多次stash操作，需要保证后stash的最先被取到，所以用栈（先进后出）来管理；pop取栈顶的内容并恢复<br><code>git stash list</code>：显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。<br><code>git stash clear</code>：清空Git栈</p><h3 id="废弃本地修改"><a href="#废弃本地修改" class="headerlink" title="废弃本地修改"></a>废弃本地修改</h3><p>核心思想就是版本回退，放弃本地修改</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git reset --hard git pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>引用：</p><p><code>git config</code></p><p><a href="https://www.cnblogs.com/furzoom/p/7710265.html">https://www.cnblogs.com/furzoom/p/7710265.html</a></p><p><a href="https://www.cnblogs.com/fireporsche/p/9359130.html">https://www.cnblogs.com/fireporsche/p/9359130.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 配置文件解析</title>
      <link href="/2022/01/04/go/go-pei-zhi-wen-jian-jie-xi/"/>
      <url>/2022/01/04/go/go-pei-zhi-wen-jian-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h1><pre class="line-numbers language-none"><code class="language-none">go get github.com/spf13/viper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置文件结构体"><a href="#配置文件结构体" class="headerlink" title="配置文件结构体"></a>配置文件结构体</h2><p>设置引用的配置文件结构体</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> test <span class="token keyword">struct</span> <span class="token punctuation">{</span>TestA     <span class="token builtin">bool</span>     <span class="token string">`mapstructure:"testA"`</span>TestB     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`mapstructure:"testB"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h2><p>全路径，根据文件名自动读取对应配置格式，如：<code>yaml</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">SetConfigFile</span><span class="token punctuation">(</span><span class="token string">"./config.yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 指定配置文件路径</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigName</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span> <span class="token comment">// 配置文件名称(无扩展名)</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span>viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">"/etc/appname/"</span><span class="token punctuation">)</span>   <span class="token comment">// 查找配置文件所在的路径</span>viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">"$HOME/.appname"</span><span class="token punctuation">)</span>  <span class="token comment">// 多次调用以添加多个搜索路径</span>viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>               <span class="token comment">// 还可以在工作目录中查找配置</span>err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 查找并读取配置文件</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 处理读取配置文件的错误</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Fatal error config file: %s \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>err <span class="token operator">=</span> viper<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">)</span> <span class="token comment">// 加载到对应结构体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细内容</p><p>转载：<a href="https://www.cnblogs.com/you-men/p/14694780.html">https://www.cnblogs.com/you-men/p/14694780.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> viper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CEPH部署</title>
      <link href="/2021/12/30/filestorage/ceph-bu-shu/"/>
      <url>/2021/12/30/filestorage/ceph-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Ceph部署流程"><a href="#Ceph部署流程" class="headerlink" title="Ceph部署流程"></a>Ceph部署流程</h1><h2 id="预检"><a href="#预检" class="headerlink" title="预检"></a>预检</h2><h3 id="一、部署服务器安装"><a href="#一、部署服务器安装" class="headerlink" title="一、部署服务器安装"></a>一、部署服务器安装</h3><h4 id="1、新加软件包源"><a href="#1、新加软件包源" class="headerlink" title="1、新加软件包源"></a>1、新加软件包源</h4><p>用 Ceph 的最新主稳定版名字替换 <code>{ceph-stable-release}</code> （如 <code>firefly</code> ），用你的Linux发行版名字替换 <code>{distro}</code> （如 <code>el6</code> 为 CentOS 6 、 <code>el7</code> 为 CentOS 7 、 <code>rhel6</code> 为 Red Hat 6.5 、 <code>rhel7</code> 为 Red Hat 7 、 <code>fc19</code> 是 Fedora 19 、 <code>fc20</code> 是 Fedora 20 ）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vim /etc/yum.repos.d/ceph.repo[ceph-noarch]name=Ceph noarch packagesbaseurl=http://download.ceph.com/rpm-{ceph-release}/{distro}/noarchenabled=1gpgcheck=1type=rpm-mdgpgkey=https://download.ceph.com/keys/release.asc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、安装ceph-deploy"><a href="#2、安装ceph-deploy" class="headerlink" title="2、安装ceph-deploy"></a>2、安装ceph-deploy</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum install ceph-deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、节点服务器安装"><a href="#二、节点服务器安装" class="headerlink" title="二、节点服务器安装"></a>二、节点服务器安装</h3><h4 id="1、安装NTP服务"><a href="#1、安装NTP服务" class="headerlink" title="1、安装NTP服务"></a>1、安装NTP服务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum install ntp ntpdate ntp-doc$ vim /etc/ntp.confserver ntp服务器地址 iburst$ systemctl restart ntp$ systemctl enable ntp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、创建CEPH用户"><a href="#2、创建CEPH用户" class="headerlink" title="2、创建CEPH用户"></a>2、创建CEPH用户</h4><p><code>ceph-deploy</code> 工具必须以<strong>普通用户</strong>登录 Ceph 节点，且此用户拥有无密码使用 <code>sudo</code> 的权限</p><p>并且用户名不能叫ceph，部署服务器到节点的普通用户需要免密登陆</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ useradd {username}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>允许无密码 SSH 登录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把公钥拷贝到各 Ceph 节点</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-copy-id {username}@node1$ ssh-copy-id {username}@node2$ ssh-copy-id {username}@node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>部署服务器和节点修改/etc/hosts 使服务器可以解析hostname</p><p>用 <code>ping</code> 短主机名（ <code>hostname -s</code> ）的方式确认网络<strong>联通性</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">192.168.xxx.111  node1192.168.xxx.222  node2192.168.xxx.333  node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、关闭防火墙"><a href="#3、关闭防火墙" class="headerlink" title="3、关闭防火墙"></a>3、关闭防火墙</h4><p>关闭部署服务器和节点的防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ systemctl stop firewalld$ systemctl stop iptables$ systemctl disable firewalld$ systemctl disable iptables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、关闭selinux"><a href="#4、关闭selinux" class="headerlink" title="4、关闭selinux"></a>4、关闭selinux</h4><p>在 CentOS 和 RHEL 上， SELinux 默认为 <code>Enforcing</code> 开启状态</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ setenforce 0$ vim /etc/selinux/configSELINUX=disabled$ getenforce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、优先级-首选项"><a href="#5、优先级-首选项" class="headerlink" title="5、优先级/首选项"></a>5、优先级/首选项</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum install yum-plugin-priorities<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CEPH存储集群"><a href="#CEPH存储集群" class="headerlink" title="CEPH存储集群"></a>CEPH存储集群</h2><h3 id="一、创建集群"><a href="#一、创建集群" class="headerlink" title="一、创建集群"></a>一、创建集群</h3><h4 id="1、创建指定目录"><a href="#1、创建指定目录" class="headerlink" title="1、创建指定目录"></a>1、创建指定目录</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ceph-deploy` 会把文件输出到当前目录，所以请确保在**此目录下**以普通用户**执行** `ceph-deploy$ mkdir -p /tools/my-cluster$ cd /tools/my-cluster<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、创建集群"><a href="#2、创建集群" class="headerlink" title="2、创建集群"></a>2、创建集群</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy new node1 node2 node3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、安装CEPH"><a href="#3、安装CEPH" class="headerlink" title="3、安装CEPH"></a>3、安装CEPH</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy install admin-node node1 node2 node3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、配置初始monitor"><a href="#4、配置初始monitor" class="headerlink" title="4、配置初始monitor"></a>4、配置初始monitor</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy mon create-initial<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、确认文件"><a href="#5、确认文件" class="headerlink" title="5、确认文件"></a>5、确认文件</h4><p>完成上述操作后，当前目录里应该会出现这些密钥环：</p><ul><li><code>{cluster-name}.client.admin.keyring</code></li><li><code>{cluster-name}.bootstrap-osd.keyring</code></li><li><code>{cluster-name}.bootstrap-mds.keyring</code></li><li><code>{cluster-name}.bootstrap-rgw.keyring</code></li></ul><h3 id="二、添加osd"><a href="#二、添加osd" class="headerlink" title="二、添加osd"></a>二、添加osd</h3><h4 id="1、列出node-可用磁盘"><a href="#1、列出node-可用磁盘" class="headerlink" title="1、列出node 可用磁盘"></a>1、列出node 可用磁盘</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy disk list node1$ ceph-deploy disk list node2$ ceph-deploy disk list node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、杀死、擦除、销毁—–设备的分区表和内容"><a href="#2、杀死、擦除、销毁—–设备的分区表和内容" class="headerlink" title="2、杀死、擦除、销毁—–设备的分区表和内容"></a>2、杀死、擦除、销毁—–设备的分区表和内容</h4><p>执行前确定磁盘名称正确</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy disk zap node1 /dev/sdb$ ceph-deploy disk zap node2 /dev/sdb$ ceph-deploy disk zap node3 /dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、初始化osd磁盘"><a href="#3、初始化osd磁盘" class="headerlink" title="3、初始化osd磁盘"></a>3、初始化osd磁盘</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy osd create node1 --data /dev/sdb$ ceph-deploy osd create node2 --data /dev/sdb$ ceph-deploy osd create node3 --data /dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4、复制配置文件和-admin-密钥拷贝到管理节点和-Ceph-节点"><a href="#4、复制配置文件和-admin-密钥拷贝到管理节点和-Ceph-节点" class="headerlink" title="4、复制配置文件和 admin 密钥拷贝到管理节点和 Ceph 节点"></a>4、复制配置文件和 admin 密钥拷贝到管理节点和 Ceph 节点</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy admin admin-node node1 node2 node3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、检查集群健康状态"><a href="#5、检查集群健康状态" class="headerlink" title="5、检查集群健康状态"></a>5、检查集群健康状态</h4><p>用root执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph health$ ceph -s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>等 peering 完成后，集群应该达到 <code>active + clean</code> 状态</p><h3 id="三、启用cephfs"><a href="#三、启用cephfs" class="headerlink" title="三、启用cephfs"></a>三、启用cephfs</h3><h4 id="1、启用mds服务"><a href="#1、启用mds服务" class="headerlink" title="1、启用mds服务"></a>1、启用mds服务</h4><p>至少需要一个元数据服务器才能使用 CephFS</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy mds create node1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、创建pool"><a href="#2、创建pool" class="headerlink" title="2、创建pool"></a>2、创建pool</h4><p>CephFS 需要两个 Pools，cephfs_data 和 cephfs_metadata，分别存储文件数据和文件元数据。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd pool create cephfs_data 128 128$ ceph osd pool create cephfs_metadata 64 64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一般 metadata pool 可以从相对较少的 PGs 启动, 之后可以根据需要增加 PGs，存储着 CephFS 文件的元数据</p><h4 id="3、创建CephFS"><a href="#3、创建CephFS" class="headerlink" title="3、创建CephFS"></a>3、创建CephFS</h4><p>metadata，data按照顺序。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph fs new cephfs cephfs_metadata cephfs_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、查看CephFS"><a href="#4、查看CephFS" class="headerlink" title="4、查看CephFS"></a>4、查看CephFS</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph fs ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、挂载CephFS"><a href="#四、挂载CephFS" class="headerlink" title="四、挂载CephFS"></a>四、挂载CephFS</h3><p>挂载cephfs有两种方式，kernel driver和fuse</p><h4 id="1、kernel-driver挂载"><a href="#1、kernel-driver挂载" class="headerlink" title="1、kernel driver挂载"></a>1、kernel driver挂载</h4><h4 id="1）关闭认证情况"><a href="#1）关闭认证情况" class="headerlink" title="1）关闭认证情况"></a>1）关闭认证情况</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo mkdir /mnt/wyl$ sudo mount -t ceph 192.168.xxx.111:/ /mnt/wyl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置开机自动挂载/etc/fstab</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">192.168.xxx.111:/     /mnt/wyl    ceph   noatime,_netdev    0       2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2）启用认证情况"><a href="#2）启用认证情况" class="headerlink" title="2）启用认证情况"></a>2）启用认证情况</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat ceph.client.admin.keyring[client.admin]key = AQBSdU5bT27AKxAAvKoWQdGpSuNRCHjC4B8DVA==$ mount -t ceph 192.168.xxx.111:/ /mnt/wyl  -o name=admin,secret=AQBSdU5bT27AKxAAvKoWQdGpSuNRCHjC4B8DVA==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）-查看认证方式"><a href="#3）-查看认证方式" class="headerlink" title="3） 查看认证方式"></a>3） 查看认证方式</h4><p>auth的值为none为禁用，cephx为启用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat /etc/ceph/ceph.conf auth_cluster_required = cephxauth_service_required = cephxauth_client_required = cephx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、fuse挂载"><a href="#2、fuse挂载" class="headerlink" title="2、fuse挂载"></a>2、fuse挂载</h4><h4 id="1）安装挂载工具"><a href="#1）安装挂载工具" class="headerlink" title="1）安装挂载工具"></a>1）安装挂载工具</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum -y install ceph-fuse ceph<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2）将存储节点的admin秘钥拷贝到本地"><a href="#2）将存储节点的admin秘钥拷贝到本地" class="headerlink" title="2）将存储节点的admin秘钥拷贝到本地"></a>2）将存储节点的admin秘钥拷贝到本地</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh root@node1 "ceph-authtool -p /etc/ceph/ceph.client.admin.keyring" &gt; admin.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3）赋予权限"><a href="#3）赋予权限" class="headerlink" title="3）赋予权限"></a>3）赋予权限</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ chmod 600 admin.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4）执行挂载"><a href="#4）执行挂载" class="headerlink" title="4）执行挂载"></a>4）执行挂载</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mount -t ceph node1:/ /mnt -o name=admin,secretfile=admin.key $ df -hT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5）设置开机自动挂载-etc-fstab"><a href="#5）设置开机自动挂载-etc-fstab" class="headerlink" title="5）设置开机自动挂载/etc/fstab"></a>5）设置开机自动挂载/etc/fstab</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">id=admin,conf=/etc/ceph/ceph.conf  /mnt fuse.ceph defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="一、admin-socket-exception-getting-command-descriptions-Errno-2-No-such-file-or-directory问题解决"><a href="#一、admin-socket-exception-getting-command-descriptions-Errno-2-No-such-file-or-directory问题解决" class="headerlink" title="一、admin_socket: exception getting command descriptions: [Errno 2] No such file or directory问题解决"></a>一、admin_socket: exception getting command descriptions: [Errno 2] No such file or directory问题解决</h2><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1、检查防火墙有没有关闭"><a href="#1、检查防火墙有没有关闭" class="headerlink" title="1、检查防火墙有没有关闭"></a>1、检查防火墙有没有关闭</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ iptables -F$ getenforce$ setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、删除之前版本ceph残留的文件"><a href="#2、删除之前版本ceph残留的文件" class="headerlink" title="2、删除之前版本ceph残留的文件"></a>2、删除之前版本ceph残留的文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rm -rf /etc/ceph/*$ rm -rf /var/lib/ceph/*/*$ rm -rf /var/log/ceph/*$ rm -rf /var/run/ceph/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、命令mount-t-ceph-xxx-或者-mount-ceph-xxx挂载cephfs时，提示”mount-error-22-Invalid-argument”。"><a href="#二、命令mount-t-ceph-xxx-或者-mount-ceph-xxx挂载cephfs时，提示”mount-error-22-Invalid-argument”。" class="headerlink" title="二、命令mount -t ceph xxx 或者 mount.ceph xxx挂载cephfs时，提示”mount error 22 = Invalid argument”。"></a>二、命令mount -t ceph xxx 或者 mount.ceph xxx挂载cephfs时，提示”mount error 22 = Invalid argument”。</h2><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><h3 id="1、查看密钥，可知用户名admin的密钥如下："><a href="#1、查看密钥，可知用户名admin的密钥如下：" class="headerlink" title="1、查看密钥，可知用户名admin的密钥如下："></a>1、查看密钥，可知用户名admin的密钥如下：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo cat ./ceph.client.admin.keyring[client.admin]        key = AQDYoQFd0Xr+CRAAIwRmwD7yWim2Nzq44wRwqw==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、直接指定密钥挂载"><a href="#2、直接指定密钥挂载" class="headerlink" title="2、直接指定密钥挂载"></a>2、直接指定密钥挂载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo mount.ceph node1:6789:/ ~/client_cephfs_mnt/ -o name=admin,secret=AQDYoQFd0Xr+CRAAIwRmwD7yWim2Nzq44wRwqw==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、无法删除image报rbd-error-image-still-has-watchers"><a href="#三、无法删除image报rbd-error-image-still-has-watchers" class="headerlink" title="三、无法删除image报rbd: error: image still has watchers"></a>三、无法删除image报rbd: error: image still has watchers</h2><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><h3 id="1、查看当前image上的watcher"><a href="#1、查看当前image上的watcher" class="headerlink" title="1、查看当前image上的watcher"></a>1、查看当前image上的watcher</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rbd status foowatcher=192.168.xxx.111:0/1135656048 client.4172 cookie=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、把该watcher加入黑名单："><a href="#2、把该watcher加入黑名单：" class="headerlink" title="2、把该watcher加入黑名单："></a>2、把该watcher加入黑名单：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd blacklist add 192.168.xxx.111:0/1135656048 blacklisting 192.168.xxx.111:0/1135656048 until 2017-10-18 12:04:19.103313 (3600 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、删除该image："><a href="#3、删除该image：" class="headerlink" title="3、删除该image："></a>3、删除该image：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rbd rm fooRemoving image: 100% complete...done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、查询黑名单列表"><a href="#4、查询黑名单列表" class="headerlink" title="4、查询黑名单列表"></a>4、查询黑名单列表</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd blacklist lslisted 1 entries192.168.xxx.111:0/1135656048 2017-10-18 12:04:19.103313<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5、从黑名单移出一个客户端："><a href="#5、从黑名单移出一个客户端：" class="headerlink" title="5、从黑名单移出一个客户端："></a>5、从黑名单移出一个客户端：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd blacklist rm 192.168.xxx.111:0/1135656048 un-blacklisting 192.168.xxx.111:0/1135656048<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6、清空黑名单："><a href="#6、清空黑名单：" class="headerlink" title="6、清空黑名单："></a>6、清空黑名单：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd blacklist clear removed all blacklist entries<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四、Ceph-client无法连接至集群问题解决"><a href="#四、Ceph-client无法连接至集群问题解决" class="headerlink" title="四、Ceph client无法连接至集群问题解决"></a>四、Ceph client无法连接至集群问题解决</h2><h3 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h3><h3 id="1、确定节点mon已启"><a href="#1、确定节点mon已启" class="headerlink" title="1、确定节点mon已启"></a>1、确定节点mon已启</h3><p>覆盖配置执行<code>ceph-deploy mon create-initial</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy --overwrite-conf mon create-initial<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、mon-挂掉后的快速恢复"><a href="#五、mon-挂掉后的快速恢复" class="headerlink" title="五、mon 挂掉后的快速恢复"></a>五、mon 挂掉后的快速恢复</h2><h3 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h3><h3 id="1、移除该mon"><a href="#1、移除该mon" class="headerlink" title="1、移除该mon"></a>1、移除该mon</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph mon remove node1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、清理该mon的文件"><a href="#2、清理该mon的文件" class="headerlink" title="2、清理该mon的文件"></a>2、清理该mon的文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rm -rf /var/lib/ceph/mon/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://blog.csdn.net/kong62/article/details/76998969">https://blog.csdn.net/kong62/article/details/76998969</a></p><h2 id="六、Error-EPERM-pool-deletion-is-disabled-you-must-first-set-the-mon-allow-pool-delete-config-option-to-true-before-you-can-destroy-a-pool"><a href="#六、Error-EPERM-pool-deletion-is-disabled-you-must-first-set-the-mon-allow-pool-delete-config-option-to-true-before-you-can-destroy-a-pool" class="headerlink" title="六、Error EPERM: pool deletion is disabled; you must first set the mon_allow_pool_delete config option to true before you can destroy a pool"></a>六、Error EPERM: pool deletion is disabled; you must first set the mon_allow_pool_delete config option to true before you can destroy a pool</h2><p>其实执行代码： ceph osd pool delete ecpool ecpool –yes-i-really-really-mean-it 就可以完成删除，但是此时有时候会报错：</p><p>这是由于没有配置mon节点的 mon_allow_pool_delete 字段所致，解决办法就是到mon节点进行相应的设置。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h3 id="1、打开mon节点的配置文件"><a href="#1、打开mon节点的配置文件" class="headerlink" title="1、打开mon节点的配置文件"></a>1、打开mon节点的配置文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vi /etc/ceph/ceph.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、在配置文件中添加如下内容"><a href="#2、在配置文件中添加如下内容" class="headerlink" title="2、在配置文件中添加如下内容"></a>2、在配置文件中添加如下内容</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mon_allow_pool_delete = true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、重启所有节点ceph-mon，osd服务："><a href="#3、重启所有节点ceph-mon，osd服务：" class="headerlink" title="3、重启所有节点ceph-mon，osd服务："></a>3、重启所有节点ceph-mon，osd服务：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ systemctl restart ceph-mon.target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、执行删除pool命令"><a href="#4、执行删除pool命令" class="headerlink" title="4、执行删除pool命令"></a>4、执行删除pool命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd pool delete ecpool ecpool –yes-i-really-really-mean-it<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yum install ceph-deploy.noarch -y mkdir ceph-cluster cd ceph-cluster/</p><p>ceph-deploy new k8s-ceph-0001 k8s-ceph-0002 k8s-ceph-0003 ceph-deploy mon create-initial ceph-deploy admin k8s-ceph-0001 k8s-ceph-0002 k8s-ceph-0003 ceph-deploy mgr create k8s-ceph-0001 k8s-ceph-0002 k8s-ceph-0003</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="一、ceph-conf文件配置"><a href="#一、ceph-conf文件配置" class="headerlink" title="一、ceph.conf文件配置"></a>一、ceph.conf文件配置</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[global] fsid = 1235bE62-8ae1-difg-893a-892a675757c6 mon_initial_members = ceph-node01,ceph-node02,ceph-node03 mon_host = 192.168.170.11,192.168.170.12,192.168.170.13 auth_cluster_required = cephx auth_service_required = cephx auth_client_required = cephx public_network = 192.168.170.0/22 #管理网络 cluster_network = 192.168.180.0/22 #集群网络 mon_pg_warn_max_per_osd = 1000 #每个osd上pg数量警告值，这个可以根据具体规划来设定 osd_pool_default_size = 3 #默认副本数为3 osd_pool_default_min_size = 2 #最小副本数为2，也就是只能坏一个 mon_osd_full_ratio = .85 #存储使用率达到85%将不再提供数据存储 mon_osd_nearfull_ratio = .70 #存储使用率达到70%集群将会warn状态 osd_deep_scrub_randomize_ratio = 0.01 #随机深度清洗概率,值越大，随机深度清洗概率越高,太高会影响业务 [osd] osd_max_write_size = 1024 #默认90M，一次写操作最小值 osd_recovery_op_priority = 1 #默认为10, 1-63 osd修复操作的优先级, 。值越小，优先级越低 osd_recovery_max_active = 1 #限定每个osd上同时有多少个pg可以同时进行recover osd_recovery_max_single_start = 1 # 和osd_recovery_max_active一起使用，要理解其含义。假设我们配置osd_recovery_max_single_start为1，osd_recovery_max_active为3，那么，这意味着OSD在某个时刻会为一个PG启动一个恢复操作，而且最多可以有三个恢复操作同时处于活动状态。 osd_recovery_max_chunk = 1048576 #默认为8388608, 设置恢复数据块的大小，以防网络阻塞 osd_recovery_threads = 1 #恢复数据所需的线程数 osd_max_backfills = 1 #集群故障后,最大backfill数为1，太大会影响业务 osd_scrub_begin_hour = 22 #清洗开始时间为晚上22点 osd_scrub_end_hour = 7 #清洗结束时间为早上7点 osd_recovery_sleep = 0 #默认为0，recovery的时间间隔，会影响recovery时常，如果recovery导致业务不正常，可以调大该值，增加时间间隔 osd_crush_update_on_start = false # 新加的osd会up/in,但并不会更新crushmap，prepare+active期间不会导致数据迁移<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h1 id="一、pg-num和pgp-num概念"><a href="#一、pg-num和pgp-num概念" class="headerlink" title="一、pg_num和pgp_num概念"></a>一、pg_num和pgp_num概念</h1><p>pg_num：存储池的目录个数 pgp_num：pg可用的osd排列组合数量</p><h3 id="1、仅增大pg-num"><a href="#1、仅增大pg-num" class="headerlink" title="1、仅增大pg_num"></a>1、仅增大pg_num</h3><p>因为pgp_num没变，pg的osd组合仍只能从当前pgp_num种组合里面挑选，导致新增的pg和旧pg会有重复的osd组合，该现象称之为分裂；此时pg和osd的映射没有变</p><h3 id="2、继续增大pgp-num，使其等于pg-num"><a href="#2、继续增大pgp-num，使其等于pg-num" class="headerlink" title="2、继续增大pgp_num，使其等于pg_num"></a>2、继续增大pgp_num，使其等于pg_num</h3><p>旧pg没有变化，但新增pg的osd组合发生变化，即开始重新分布</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h3 id="一、查看mon节点上所有启动的ceph服务"><a href="#一、查看mon节点上所有启动的ceph服务" class="headerlink" title="一、查看mon节点上所有启动的ceph服务"></a>一、查看mon节点上所有启动的ceph服务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ systemctl list-units --type=service|grep ceph<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、打印存储池列表"><a href="#二、打印存储池列表" class="headerlink" title="二、打印存储池列表"></a>二、打印存储池列表</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd lspools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ceph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES启动报错</title>
      <link href="/2021/12/29/elasticsearch/es-qi-dong-bao-cuo/"/>
      <url>/2021/12/29/elasticsearch/es-qi-dong-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ERROR: [2] bootstrap checks failed[1]: memory locking requested for elasticsearch process but memory is not locked[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[1]: memory locking requested for elasticsearch process but memory is not locked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="官网的解释"><a href="#官网的解释" class="headerlink" title="官网的解释"></a>官网的解释</h3><p>发生系统swapping的时候ES节点的性能会非常差，也会影响节点的稳定性。所以要不惜一切代价来避免swapping。swapping会导致Java</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>去除文件句柄限制</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$vim /etc/security/limits.conf# End of file*       soft   nofile   102400*       hard   nofile   102400* soft core 0* hard core 0*       soft memlock unlimited  # 新增*       hard memlock unlimited  # 新增<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>vm.max_map_count</code>太小</p><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>max_map_count文件包含限制一个进程可以拥有的VMA(虚拟内存区域)的数量</p><p>调整<code>max_map_count</code>大小</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$vim /etc/sysctl.conf vm.max_map_count=262144 # 新增<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>随后执行<code>/sbin/sysctl -p</code>生效</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rancher2部署</title>
      <link href="/2021/12/28/k8s/rancher2-bu-shu/"/>
      <url>/2021/12/28/k8s/rancher2-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、服务端"><a href="#一、服务端" class="headerlink" title="一、服务端"></a>一、服务端</h1><h2 id="部署k3s"><a href="#部署k3s" class="headerlink" title="部署k3s"></a>部署k3s</h2><h3 id="单点"><a href="#单点" class="headerlink" title="单点"></a>单点</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -$ cp /etc/rancher/k3s/k3s.yaml  ~/.kube/config$ kubectl get pods --all-namespaces<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="多点"><a href="#多点" class="headerlink" title="多点"></a>多点</h3><p>在其他node上执行以下命令，<code>K3S_TOKEN</code> 在第一台服务器的<code>/var/lib/rancher/k3s/server/node-token</code>路径下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="部署rancher-server"><a href="#部署rancher-server" class="headerlink" title="部署rancher server"></a>部署rancher server</h2><h3 id="添加-Helm-Chart-仓库"><a href="#添加-Helm-Chart-仓库" class="headerlink" title="添加 Helm Chart 仓库"></a>添加 Helm Chart 仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ helm repo add rancher-stable http://rancher-mirror.oss-cn-beijing.aliyuncs.com/server-charts/stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="为-Rancher-创建-Namespace"><a href="#为-Rancher-创建-Namespace" class="headerlink" title="为 Rancher 创建 Namespace"></a>为 Rancher 创建 Namespace</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl create namespace cattle-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装cert-manager"><a href="#安装cert-manager" class="headerlink" title="安装cert-manager"></a>安装cert-manager</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 在升级Helm chart之前升级CRD资源$ kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.1/cert-manager.crds.yaml# 添加 Jetstack Helm 仓库$ helm repo add jetstack [https://charts.jetstack.io](https://charts.jetstack.io/)# 更新本地 Helm chart 仓库缓存$ helm repo update# ingress.tls.source不写默认是rancher自签证书，签证域名用的是hostname填的# replicas设置为 Rancher 部署所使用的复制数量默认为 3# --version 指定版本$ helm install rancher rancher-stable/rancher \ --namespace cattle-system \ --set hostname=rancher.my.xxx \ --set replicas=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="等待-Rancher-运行"><a href="#等待-Rancher-运行" class="headerlink" title="等待 Rancher 运行"></a>等待 Rancher 运行</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl -n cattle-system rollout status deploy/rancher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>用所填的<code>hostname</code>访问，如：<code>rancher.my.xxx</code></p><h1 id="二、代理端"><a href="#二、代理端" class="headerlink" title="二、代理端"></a>二、代理端</h1><h2 id="部署k8s"><a href="#部署k8s" class="headerlink" title="部署k8s"></a>部署k8s</h2><h3 id="设置基础环境"><a href="#设置基础环境" class="headerlink" title="设置基础环境"></a>设置基础环境</h3><p>关掉防火墙，selinux</p><p>禁用虚拟内存：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ swapoff -a $ sed -ri 's/.*swap.*/#&amp;/' /etc/fstab <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum -y  docker $ vi /etc/docker/daemon.json{ "registry-mirrors": ["https://registry.docker-cn.com"], "exec-opt": ["native.cgroupdriver=systemd"] }$ systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h3><p>新增repo包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定版本安装（rancher目前貌似不支持1.22版本以上的k8s）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum install -y kubelet-1.21.3 kubeadm-1.21.3 kubectl-1.21.3$ systemctl enable kubelet;systemctl start kubelet 　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>kubeadm安装k8s（单节点部署）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubeadm init --kubernetes-version=1.21.3  --apiserver-advertise-address=本机ip --image-repository registry.aliyuncs.com/google_containers  --service-cidr=10.10.0.0/16 --pod-network-cidr=10.122.0.0/16 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完成后，根据提示执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mkdir -p $HOME/.kube$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config$ sudo chown $(id -u):$(id -g) $HOME/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加cni"><a href="#添加cni" class="headerlink" title="添加cni"></a>添加cni</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ wget https://docs.projectcalico.org/manifests/calico.yaml$ vi calico.yaml    - name: IP_AUTODETECTION_METHOD  # DaemonSet中添加该环境变量      value: interface=ens160  $ kubectl apply -f calico.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="污点"><a href="#污点" class="headerlink" title="污点"></a>污点</h3><p>单点，所以要把master污点去掉</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl describe node 本机 $ kubectl taint node 本机 node-role.kubernetes.io/master:NoSchedule-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="dns解析"><a href="#dns解析" class="headerlink" title="dns解析"></a>dns解析</h2><p>不走dns域名解析可以用本地解析</p><h3 id="在代理端修改hosts"><a href="#在代理端修改hosts" class="headerlink" title="在代理端修改hosts"></a>在代理端修改hosts</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vi /etc/hosts# 服务端ip地址192.168.x.x rancher.my.xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改coredns-configmap"><a href="#修改coredns-configmap" class="headerlink" title="修改coredns configmap"></a>修改coredns configmap</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl edit cm coredns -n kube-system hosts {    192.168.x.x rancher.my.xxx     fallthrougu }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl delete pods  coredns-xxx -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rancher </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Rancher </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
