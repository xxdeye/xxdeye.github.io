<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go操作elasticsearch</title>
      <link href="/2022/01/13/go-cao-zuo-elasticsearch/"/>
      <url>/2022/01/13/go-cao-zuo-elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="Go操作elasticsearch"><a href="#Go操作elasticsearch" class="headerlink" title="Go操作elasticsearch"></a>Go操作elasticsearch</h1><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p><code>"github.com/olivere/elastic/v7"</code></p><p>ES版本7的用v7的包，版本6的用v6的包</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>声明client类型</p><p><code>var client *elastic.Client</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">errorlog <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"ELASTIC"</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token punctuation">)</span>client<span class="token punctuation">,</span> err <span class="token operator">=</span> elastic<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token comment">//  elastic.SetSniff(true),      //是否开启集群嗅探</span><span class="token comment">//elastic.SetHealthcheckInterval(10 * time.Second), //设置两次运行状况检查之间的间隔, 默认60s</span><span class="token comment">//elastic.SetGzip(false),  //启用或禁用gzip压缩</span><span class="token comment">//elastic.SetInfoLog(log.New(os.Stdout, "", log.LstdFlags)),  //INFO级别日志输出配置</span>    elastic<span class="token punctuation">.</span><span class="token function">SetErrorLog</span><span class="token punctuation">(</span>errorlog<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 设置error日志输出格式</span>    elastic<span class="token punctuation">.</span><span class="token function">SetURL</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:9200"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// Es url </span>    elastic<span class="token punctuation">.</span><span class="token function">SetBasicAuth</span><span class="token punctuation">(</span>        <span class="token string">"xxx"</span><span class="token punctuation">,</span>   <span class="token comment">// 账号</span>        <span class="token string">"xxxxxx"</span><span class="token punctuation">)</span>  <span class="token comment">// 密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看连接状态"><a href="#查看连接状态" class="headerlink" title="查看连接状态"></a>查看连接状态</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">info<span class="token punctuation">,</span> code<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span>    <span class="token string">"http://127.0.0.1:9200"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">esversion<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">ElasticsearchVersion</span><span class="token punctuation">(</span>    <span class="token string">"http://127.0.0.1:9200"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="创建-更新索引"><a href="#创建-更新索引" class="headerlink" title="创建/更新索引"></a>创建/更新索引</h2><h3 id="单条操作"><a href="#单条操作" class="headerlink" title="单条操作"></a>单条操作</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conf<span class="token punctuation">.</span><span class="token function">ES</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token string">"_doc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">// id为字符串, 创建一条此id的数据或覆盖已有此id的记录</span><span class="token comment">// data为结构体或map, 当然结构需要跟索引的mapping类型保持一致</span><span class="token function">Id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BodyJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">bulkRequest <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Bulk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>  <span class="token comment">// 索引名</span>doc <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewBulkIndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span>    <span class="token string">"xxx"</span>  <span class="token comment">// 文档id</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Doc</span><span class="token punctuation">(</span>    res  <span class="token comment">// 文档内容</span><span class="token punctuation">)</span>bulkRequest <span class="token operator">=</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>  <span class="token comment">// 添加到bulk批次里</span>bulkRequest<span class="token punctuation">.</span><span class="token function">NumberOfActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 查看bulk批次里文档数</span>bulkResponse<span class="token punctuation">,</span> err <span class="token operator">:=</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 执行提交bulk</span>bulkResponse<span class="token punctuation">.</span><span class="token function">Failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 查看提交失败的文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h2><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">boolQ <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewBoolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 声明条件</span>boolQ<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>  <span class="token comment">// filter筛选</span>    elastic<span class="token punctuation">.</span><span class="token function">NewRangeQuery</span><span class="token punctuation">(</span>        <span class="token string">"xxx"</span>  <span class="token comment">// key</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Gte</span><span class="token punctuation">(</span>  <span class="token comment">// 大于等于</span>        <span class="token string">"aaaa"</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lt</span><span class="token punctuation">(</span>  <span class="token comment">// 小于等于</span>        <span class="token string">"bbbb"</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryName</span><span class="token punctuation">(</span>        <span class="token string">"xxxx"</span>  <span class="token comment">// 字段</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="scroll查询"><a href="#scroll查询" class="headerlink" title="scroll查询"></a>scroll查询</h3><p>一次查询量过大，分批查询</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">do<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Scroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>    <span class="token string">"xxxx"</span>  <span class="token comment">// 索引名</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scroll</span><span class="token punctuation">(</span>    <span class="token string">"5s"</span>  <span class="token comment">// scroll每次查询内容保留时间</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>    boolQ  <span class="token comment">// 查询条件</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span>    <span class="token number">1000</span>  <span class="token comment">// scroll每次查询大小</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取返回scroll ID</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">scrollId <span class="token operator">:=</span> do<span class="token punctuation">.</span>ScrollId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基于scroll ID查询接下来内容</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">result<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Scroll</span><span class="token punctuation">(</span>    <span class="token string">"5s"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>    boolQ<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ScrollId</span><span class="token punctuation">(</span>    scrollId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除当前scroll ID，多scroll查询一定要清除</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">client<span class="token punctuation">.</span><span class="token function">ClearScroll</span><span class="token punctuation">(</span>do<span class="token punctuation">.</span>ScrollId<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引用：</p><p><a href="https://pkg.go.dev/github.com/olivere/elastic?utm_source=godoc">https://pkg.go.dev/github.com/olivere/elastic?utm_source=godoc</a></p><p><a href="https://blog.csdn.net/p1049990866/article/details/117254708">https://blog.csdn.net/p1049990866/article/details/117254708</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> elastic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KeepAlive部署</title>
      <link href="/2022/01/11/keepalived-bu-shu/"/>
      <url>/2022/01/11/keepalived-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、主节点"><a href="#一、主节点" class="headerlink" title="一、主节点"></a>一、主节点</h2><h3 id="安装keepalive"><a href="#安装keepalive" class="headerlink" title="安装keepalive"></a>安装keepalive</h3><p><code>yum -y install keepalived</code></p><p>或者</p><p>rpm包安装</p><p>1.<a href="https://centos.pkgs.org/7/centos-x86_64/">https://centos.pkgs.org/7/centos-x86_64/</a></p><p>到rpm网站下载包<code>net-snmp-libs-5.7.2-49.el7.x86_64.rpm</code>，<code>net-snmp-agent-libs-5.7.2-49.el7.x86_64.rpm</code>，<code>keepalived-1.3.5-19.el7.x86_64.rpm</code></p><pre class="line-numbers language-none"><code class="language-none">mkdir /toolsrz -be 包rpm -ivh  --replacefiles net-snmp-libs-5.7.2-49.el7.x86_64.rpmrpm -ivh  --replacefiles net-snmp-agent-libs-5.7.2-49.el7.x86_64.rpm rpm -ivh  --replacefiles keepalived-1.3.5-19.el7.x86_64.rpm <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改keepalive配置文件"><a href="#修改keepalive配置文件" class="headerlink" title="修改keepalive配置文件"></a>修改keepalive配置文件</h3><p>配置文件默认引用的<code>/etc/keepalived/keepalived.conf</code></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vi /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs { router_id nginx ##标识节点的字符串，通常为hostname}vrrp_script chk_nginx { script "/etc/keepalived/nginx_check.sh"  ##执行脚本位置 interval 2 ##检测时间间隔 weight -5 ## 如果条件成立则权重减5（-5） fall 3  ## 失败3次 rise 2  ## 尝试2次}## 定义虚拟路由 VI_1为自定义标识。vrrp_instance VI_1 {    state MASTER      ## 主节点为MASTER，备份节点为BACKUP    interface 网卡名(如：eth1)    mcast_src_ip 本机ip地址    virtual_router_id 51  ## 虚拟路由ID号，主从要一致    priority 100  ##优先级配置（0-254的值）    advert_int 2 ## 组播信息发送间隔，俩个节点必须配置一致，默认1s    authentication {        auth_type PASS        auth_pass 1111 ## 真实生产环境下对密码进行匹配    }    virtual_ipaddress {        虚拟ip地址(ping不通的同网段ip)/24    ## 虚拟ip(vip)，可以指定多个    }    track_script {      chk_nginx  ##vrrp_script 名    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新增判断脚本"><a href="#新增判断脚本" class="headerlink" title="新增判断脚本"></a>新增判断脚本</h3><p>这里用的是nginx判断脚本</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vi /etc/keepalived/nginx_check.sh#!/bin/bashA=`ps -C nginx --no-header |wc -l`if [ $A -eq 0 ];then    /tools/nginx/sbin/nginx     sleep 2    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then        killall keepalived    fifi[root@localhost ~]# chmod a+x nginx_check.sh  #要给脚本加执行权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启用keepalive"><a href="#启用keepalive" class="headerlink" title="启用keepalive"></a>启用keepalive</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl start keepalived[root@localhost ~]# ps -ef|grep keepaliveroot       31173       1  0 14:28 ?        00:00:02 /usr/sbin/keepalived -Droot       31174   31173  0 14:28 ?        00:00:02 /usr/sbin/keepalived -Droot       31175   31173  0 14:28 ?        00:00:08 /usr/sbin/keepalived -Droot       33249   29976  0 17:36 pts/1    00:00:00 grep --color=auto keepalive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、从节点"><a href="#二、从节点" class="headerlink" title="二、从节点"></a>二、从节点</h2><h3 id="keepallive配置修改"><a href="#keepallive配置修改" class="headerlink" title="keepallive配置修改"></a>keepallive配置修改</h3><p>其他部分与主节点一致</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vi /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs { router_id nginx ##标识节点的字符串，通常为hostname}vrrp_script chk_nginx { script "/etc/keepalived/nginx_check.sh"  ##执行脚本位置 interval 2 ##检测时间间隔 weight -5 ## 如果条件成立则权重减5（-5） fall 3  ## 失败3次 rise 2  ## 尝试2次}## 定义虚拟路由 VI_1为自定义标识。vrrp_instance VI_1 {    state BACKUP      ## 主节点为MASTER，备份节点为BACKUP    interface 网卡名(如：eth1)    mcast_src_ip 本机ip地址    virtual_router_id 51  ## 虚拟路由ID号，主从要一致    priority 99  ##优先级配置（0-254的值）    advert_int 2 ## 组播信息发送间隔，俩个节点必须配置一致，默认1s    authentication {        auth_type PASS        auth_pass 1111 ## 真实生产环境下对密码进行匹配    }    virtual_ipaddress {        虚拟ip地址(ping不通的同网段ip)/24    ## 虚拟ip(vip)，可以指定多个    }    track_script {      chk_nginx  ##vrrp_script 名    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><h3 id="查看虚拟ip"><a href="#查看虚拟ip" class="headerlink" title="查看虚拟ip"></a>查看虚拟ip</h3><p><code>ip a</code>查看vip是否已经有了</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ip a...2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    ...    inet 192.168.112.139/24 brd 192.168.112.255 scope global noprefixroute dynamic ens33       ...    inet 192.168.112.141/24 scope global secondary ens33 #vip...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keepalived判断脚本是nginx的，kill掉nginx后，再次查看主节点和从节点vip是否存在</p>]]></content>
      
      
      <categories>
          
          <category> KeepAlive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeepAlive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt窗口设置</title>
      <link href="/2022/01/09/qt-chuang-kou-she-zhi/"/>
      <url>/2022/01/09/qt-chuang-kou-she-zhi/</url>
      
        <content type="html"><![CDATA[<p>s</p><p>​     //初始化窗口为无标题，半透明，透明度为0.8</p><p>​     this-&gt;setWindowFlags(Qt::FramelessWindowHint);</p><p>​     this-&gt;setWindowOpacity(0.8);</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># setWindowFlags(Qt::FramelessWindowHint | Qt::Tool); // 无边框 + 无状态栏图标</span><span class="token comment"># setAttribute(Qt::WA_TranslucentBackground); // 透明</span>self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>setWindowFlags<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>FramelessWindowHint<span class="token punctuation">)</span>self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>setAttribute<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>WA_TranslucentBackground<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>好，当我们清楚了窗口移动的原理后，就比较轻松了，只需要查找到这个三个事件并对其进行重写即可。我们知道，Qt的控件中有鼠标事件，其中有三个正好是我们所需要的</p><p>virtual voidmousePressEvent(QMouseEvent* e);    // 鼠标的单击事件</p><p>virtual voidmouseMoveEvent(QMouseEvent* e);    // 鼠标的移动事件</p><pre><code>     virtualvoid mouseReleaseEvent(QMouseEvent* e);  // 鼠标的单击释放事件</code></pre><p>透明</p><p><a href="https://blog.csdn.net/InTim/article/details/81513990">https://blog.csdn.net/InTim/article/details/81513990</a></p><p>左键移动</p><p><a href="https://blog.csdn.net/qq_45662588/article/details/121082278">https://blog.csdn.net/qq_45662588/article/details/121082278</a></p><p><a href="https://blog.csdn.net/fgh1991/article/details/89888002">https://blog.csdn.net/fgh1991/article/details/89888002</a></p><p>透明加左键移动</p><p><a href="https://blog.csdn.net/chlk118/article/details/39235153">https://blog.csdn.net/chlk118/article/details/39235153</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kind快速搭建Kubernetes</title>
      <link href="/2022/01/07/kind-kuai-su-da-jian-kubernetes/"/>
      <url>/2022/01/07/kind-kuai-su-da-jian-kubernetes/</url>
      
        <content type="html"><![CDATA[<h1 id="kind快速搭建Kubernetes"><a href="#kind快速搭建Kubernetes" class="headerlink" title="kind快速搭建Kubernetes"></a>kind快速搭建Kubernetes</h1><p>官方文档：<a href="https://kind.sigs.k8s.io/docs/user/quick-start/">https://kind.sigs.k8s.io/docs/user/quick-start/</a></p><h2 id="kind安装"><a href="#kind安装" class="headerlink" title="kind安装"></a>kind安装</h2><p>下载二进制文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64chmod +x ./kindmv ./kind /usr/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="部署单点"><a href="#部署单点" class="headerlink" title="部署单点"></a>部署单点</h2><p>使用 kind 创建 Kubernetes 集群非常的方便，只需要一行命令即可</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kind]# kind create clusterCreating cluster "kind" ... ✓ Ensuring node image (kindest/node:v1.21.1)  ✓ Preparing nodes    ✓ Writing configuration  ✓ Starting control-plane ️  ✓ Installing CNI  ✓ Installing StorageClass                             Set kubectl context to "kind-kind"You can now use your cluster with:kubectl cluster-info --context kind-kindThanks for using kind! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除集群</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kind delete cluster<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认集群名称是 “kind”，如果要创建多个或者指定集群名称，可以指定 name 参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kind create cluster --name<span class="token operator">=</span>k8s-cluster1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除集群</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kind delete cluster --name<span class="token operator">=</span>k8s-cluster1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看kind容器</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kind]# docker ps|grep kind289d71606549        kindest/node:v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6                "/usr/local/bin/en..."   3 minutes ago       Up 3 minutes        127.0.0.1:45171-&gt;6443/tcp   kind-control-plane<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时默认上下文是装好的kind</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tools]# kubectl get pods -ANAMESPACE            NAME                                         READY   STATUS    RESTARTS   AGEkube-system          coredns-558bd4d5db-92lpw                     1/1     Running   0          12mkube-system          coredns-558bd4d5db-fzx8r                     1/1     Running   0          12mkube-system          etcd-kind-control-plane                      1/1     Running   0          12mkube-system          kindnet-p88hk                                1/1     Running   0          12mkube-system          kube-apiserver-kind-control-plane            1/1     Running   0          12mkube-system          kube-controller-manager-kind-control-plane   1/1     Running   0          12mkube-system          kube-proxy-bv9mn                             1/1     Running   0          12mkube-system          kube-scheduler-kind-control-plane            1/1     Running   0          12mlocal-path-storage   local-path-provisioner-547f784dff-sn6p5      1/1     Running   0          12m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看已有上下文</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubectl config get-contexts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改上下文，切换集群</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubectl config  use-context kubernetes-admin@kubernetes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多集群创建"><a href="#多集群创建" class="headerlink" title="多集群创建"></a>多集群创建</h2><p>node版本：<a href="https://github.com/kubernetes-sigs/kind/releases">https://github.com/kubernetes-sigs/kind/releases</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Cluster<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kind.x<span class="token punctuation">-</span>k8s.io/v1alpha4<span class="token key atrule">nodes</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> control<span class="token punctuation">-</span>plane  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> worker  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> worker  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署引用yaml文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kind create cluster --name kind --config  cluster.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多集群创建-ingress"><a href="#多集群创建-ingress" class="headerlink" title="多集群创建-ingress"></a>多集群创建-ingress</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Cluster<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kind.x<span class="token punctuation">-</span>k8s.io/v1alpha4<span class="token key atrule">nodes</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> control<span class="token punctuation">-</span>plane  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4  <span class="token key atrule">kubeadmConfigPatches</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">    kind: InitConfiguration    nodeRegistration:      kubeletExtraArgs:        node-labels: "ingress-ready=true"</span>  <span class="token key atrule">extraPortMappings</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP  <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP<span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> worker  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> worker  <span class="token key atrule">image</span><span class="token punctuation">:</span> kindest/node<span class="token punctuation">:</span>v1.18.15@sha256<span class="token punctuation">:</span>5c1b980c4d0e0e8e7eb9f36f7df525d079a96169c8a8f20d8bd108c0d0889cc4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署引用yaml文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kind create cluster --name kind-ingress --config  cluster.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署ingress</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/kind/deploy.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引用：</p><p><a href="https://www.cnblogs.com/weihanli/p/12831225.html">https://www.cnblogs.com/weihanli/p/12831225.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/392209413">https://zhuanlan.zhihu.com/p/392209413</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> kind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubeadm部署</title>
      <link href="/2022/01/06/kubeadm-bu-shu/"/>
      <url>/2022/01/06/kubeadm-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h1><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 关闭防火墙systemctl stop firewalldsystemctl disable firewalld# 关闭selinuxsed -i 's/enforcing/disabled/' /etc/selinux/config  # 永久setenforce 0  # 临时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repoyum -y install docker-cesystemctl enable docker &amp;&amp; systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="安装Kubernetes"><a href="#安装Kubernetes" class="headerlink" title="安装Kubernetes"></a>安装Kubernetes</h1><h2 id="添加阿里云YUM的软件源"><a href="#添加阿里云YUM的软件源" class="headerlink" title="添加阿里云YUM的软件源"></a>添加阿里云YUM的软件源</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装kubeadm，kubelet和kubectl"><a href="#安装kubeadm，kubelet和kubectl" class="headerlink" title="安装kubeadm，kubelet和kubectl"></a>安装kubeadm，kubelet和kubectl</h2><p>这里安装的是最新版本</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">yum -y install kubelet-1.23.1 kubeadm-1.23.1 kubectl-1.23.1systemctl enable kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="部署Kubernetes-Master"><a href="#部署Kubernetes-Master" class="headerlink" title="部署Kubernetes Master"></a>部署Kubernetes Master</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubeadm init \--apiserver-advertise-address=10.0.4.2 \--image-repository registry.aliyuncs.com/google_containers \--kubernetes-version v1.23.1 \--service-cidr=10.1.0.0/16 \--pod-network-cidr=10.244.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果会有一串token</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/configAlternatively, if you are the root user, you can run:  export KUBECONFIG=/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can join any number of worker nodes by running the following on each as root:# node 加入主节点执行这条kubeadm join 10.0.4.2:6443 --token xxxxxx.1i07i2f7nrfdcqok \        --discovery-token-ca-cert-hash sha256:xxxxx86c3bc214140dece61119c56a46501fb7374cd6b06acca698c7d1bxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据提示执行</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>命令补全</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">source &lt;(kubectl completion bash) echo "source &lt;(kubectl completion bash)" &gt;&gt; ~/.bashrc#或alias k=kubectlsource &lt;(kubectl completion bash | sed s/kubectl/k/g)alias kcd='kubectl config set-context $(kubectl config current-context) --namespace'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加入Kubernetes-Node"><a href="#加入Kubernetes-Node" class="headerlink" title="加入Kubernetes Node"></a>加入Kubernetes Node</h2><p>在从节点上执行这条命令</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kubeadm join 10.0.4.2:6443 --token xxxxxx.1i07i2f7nrfdcqok \        --discovery-token-ca-cert-hash sha256:xxxxx86c3bc214140dece61119c56a46501fb7374cd6b06acca698c7d1bxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装pod网络插件"><a href="#安装pod网络插件" class="headerlink" title="安装pod网络插件"></a>安装pod网络插件</h2><p>这里用的CNI是calico</p><p>文档：<a href="https://docs.projectcalico.org/getting-started/kubernetes/quickstart">https://docs.projectcalico.org/getting-started/kubernetes/quickstart</a></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https://docs.projectcalico.org/manifests/calico.yamlkubectl apply -f calico.yamlkubectl get pods -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h1><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改Svc为NodePod</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">vi recommended.yaml...kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  # 这里需要修改  selector:    k8s-app: kubernetes-dashboard  type: NodePort  # 这里需要修改...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">~]# kubectl apply -f recommended.yaml~]# kubectl get pods -n kubernetes-dashboardNAME                                         READY   STATUS    RESTARTS   AGEdashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          1mkubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          1m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：<a href="https://blog.csdn.net/weixin_48711696/article/details/114805048">https://blog.csdn.net/weixin_48711696/article/details/114805048</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用手册</title>
      <link href="/2022/01/06/git-shi-yong-shou-ce/"/>
      <url>/2022/01/06/git-shi-yong-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="Git用法"><a href="#Git用法" class="headerlink" title="Git用法"></a>Git用法</h1><h2 id="Git-clean"><a href="#Git-clean" class="headerlink" title="Git clean"></a>Git clean</h2><p><code>git clean -n</code>：是一次clean的演习, 告诉你哪些文件会被删除. 记住他不会真正的删除文件, 只是一个提醒</p><p><code>git clean -f</code>：删除当前目录下所有没有track过的文件. 他不会删除.gitignore文件里面指定的文件夹和文件, 不管这些文件有没有被track过</p><p><code>git clean -f &lt;path&gt;</code>：删除指定路径下的没有被track过的文件</p><p><code>git clean -df</code>：删除当前目录下没有被track过的文件和文件夹</p><p><code>git clean -xf</code>：删除当前目录下所有没有track过的文件. 不管他是否是.gitignore文件里面指定的文件夹和文件</p><h3 id="常见使用"><a href="#常见使用" class="headerlink" title="常见使用"></a>常见使用</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git reset --hardgit clean -df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行后, 工作目录和缓存区回到最近一次commit时候一摸一样的状态，git status会告诉你这是一个干净的工作目录, 又是一个新的开始了！</p><h1 id="The-following-untracked-working-tree-files-would-be-overwritten-by-merge"><a href="#The-following-untracked-working-tree-files-would-be-overwritten-by-merge" class="headerlink" title="The following untracked working tree files would be overwritten by merge"></a>The following untracked working tree files would be overwritten by merge</h1><p>团队其他成员修改了某文件并已提交入库，你在pull之前修改了本地该文件，等你修改完代码再pull时，会报这个错</p><h2 id="保留修改"><a href="#保留修改" class="headerlink" title="保留修改"></a>保留修改</h2><p>执行以下三条命令</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git stash #封存修改git pull origin master git stash pop #把修改还原<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git stash</code>：备份当前工作区内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前工作区内容保存到Git栈中<br><code>git pull</code>：拉取服务器上当前分支代码<br><code>git stash pop</code>：从Git栈中读取最近一次保存的内容，恢复工作区相关内容。同时，用户可能进行多次stash操作，需要保证后stash的最先被取到，所以用栈（先进后出）来管理；pop取栈顶的内容并恢复<br><code>git stash list</code>：显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。<br><code>git stash clear</code>：清空Git栈</p><h2 id="废弃本地修改"><a href="#废弃本地修改" class="headerlink" title="废弃本地修改"></a>废弃本地修改</h2><p>核心思想就是版本回退，放弃本地修改</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git reset --hard git pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 配置文件解析</title>
      <link href="/2022/01/04/go-pei-zhi-wen-jian-jie-xi/"/>
      <url>/2022/01/04/go-pei-zhi-wen-jian-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h1><pre class="line-numbers language-none"><code class="language-none">go get github.com/spf13/viper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置文件结构体"><a href="#配置文件结构体" class="headerlink" title="配置文件结构体"></a>配置文件结构体</h2><p>设置引用的配置文件结构体</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> test <span class="token keyword">struct</span> <span class="token punctuation">{</span>TestA     <span class="token builtin">bool</span>     <span class="token string">`mapstructure:"testA"`</span>TestB     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`mapstructure:"testB"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h2><p>全路径，根据文件名自动读取对应配置格式，如：<code>yaml</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">SetConfigFile</span><span class="token punctuation">(</span><span class="token string">"./config.yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 指定配置文件路径</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigName</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span> <span class="token comment">// 配置文件名称(无扩展名)</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span>viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">"/etc/appname/"</span><span class="token punctuation">)</span>   <span class="token comment">// 查找配置文件所在的路径</span>viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">"$HOME/.appname"</span><span class="token punctuation">)</span>  <span class="token comment">// 多次调用以添加多个搜索路径</span>viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>               <span class="token comment">// 还可以在工作目录中查找配置</span>err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 查找并读取配置文件</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 处理读取配置文件的错误</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Fatal error config file: %s \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>err <span class="token operator">=</span> viper<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">)</span> <span class="token comment">// 加载到对应结构体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细内容</p><p>转载：<a href="https://www.cnblogs.com/you-men/p/14694780.html">https://www.cnblogs.com/you-men/p/14694780.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> viper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CEPH部署</title>
      <link href="/2021/12/30/ceph-bu-shu/"/>
      <url>/2021/12/30/ceph-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Ceph部署流程"><a href="#Ceph部署流程" class="headerlink" title="Ceph部署流程"></a>Ceph部署流程</h1><h2 id="预检"><a href="#预检" class="headerlink" title="预检"></a>预检</h2><h3 id="一、部署服务器安装"><a href="#一、部署服务器安装" class="headerlink" title="一、部署服务器安装"></a>一、部署服务器安装</h3><h4 id="1、新加软件包源"><a href="#1、新加软件包源" class="headerlink" title="1、新加软件包源"></a>1、新加软件包源</h4><p>用 Ceph 的最新主稳定版名字替换 <code>{ceph-stable-release}</code> （如 <code>firefly</code> ），用你的Linux发行版名字替换 <code>{distro}</code> （如 <code>el6</code> 为 CentOS 6 、 <code>el7</code> 为 CentOS 7 、 <code>rhel6</code> 为 Red Hat 6.5 、 <code>rhel7</code> 为 Red Hat 7 、 <code>fc19</code> 是 Fedora 19 、 <code>fc20</code> 是 Fedora 20 ）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vim /etc/yum.repos.d/ceph.repo[ceph-noarch]name=Ceph noarch packagesbaseurl=http://download.ceph.com/rpm-{ceph-release}/{distro}/noarchenabled=1gpgcheck=1type=rpm-mdgpgkey=https://download.ceph.com/keys/release.asc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、安装ceph-deploy"><a href="#2、安装ceph-deploy" class="headerlink" title="2、安装ceph-deploy"></a>2、安装ceph-deploy</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum install ceph-deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、节点服务器安装"><a href="#二、节点服务器安装" class="headerlink" title="二、节点服务器安装"></a>二、节点服务器安装</h3><h4 id="1、安装NTP服务"><a href="#1、安装NTP服务" class="headerlink" title="1、安装NTP服务"></a>1、安装NTP服务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum install ntp ntpdate ntp-doc$ vim /etc/ntp.confserver ntp服务器地址 iburst$ systemctl restart ntp$ systemctl enable ntp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、创建CEPH用户"><a href="#2、创建CEPH用户" class="headerlink" title="2、创建CEPH用户"></a>2、创建CEPH用户</h4><p><code>ceph-deploy</code> 工具必须以<strong>普通用户</strong>登录 Ceph 节点，且此用户拥有无密码使用 <code>sudo</code> 的权限</p><p>并且用户名不能叫ceph，部署服务器到节点的普通用户需要免密登陆</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ useradd {username}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>允许无密码 SSH 登录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把公钥拷贝到各 Ceph 节点</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh-copy-id {username}@node1$ ssh-copy-id {username}@node2$ ssh-copy-id {username}@node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>部署服务器和节点修改/etc/hosts 使服务器可以解析hostname</p><p>用 <code>ping</code> 短主机名（ <code>hostname -s</code> ）的方式确认网络<strong>联通性</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">192.168.xxx.111  node1192.168.xxx.222  node2192.168.xxx.333  node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、关闭防火墙"><a href="#3、关闭防火墙" class="headerlink" title="3、关闭防火墙"></a>3、关闭防火墙</h4><p>关闭部署服务器和节点的防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ systemctl stop firewalld$ systemctl stop iptables$ systemctl disable firewalld$ systemctl disable iptables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、关闭selinux"><a href="#4、关闭selinux" class="headerlink" title="4、关闭selinux"></a>4、关闭selinux</h4><p>在 CentOS 和 RHEL 上， SELinux 默认为 <code>Enforcing</code> 开启状态</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ setenforce 0$ vim /etc/selinux/configSELINUX=disabled$ getenforce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、优先级-首选项"><a href="#5、优先级-首选项" class="headerlink" title="5、优先级/首选项"></a>5、优先级/首选项</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum install yum-plugin-priorities<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CEPH存储集群"><a href="#CEPH存储集群" class="headerlink" title="CEPH存储集群"></a>CEPH存储集群</h2><h3 id="一、创建集群"><a href="#一、创建集群" class="headerlink" title="一、创建集群"></a>一、创建集群</h3><h4 id="1、创建指定目录"><a href="#1、创建指定目录" class="headerlink" title="1、创建指定目录"></a>1、创建指定目录</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ceph-deploy` 会把文件输出到当前目录，所以请确保在**此目录下**以普通用户**执行** `ceph-deploy$ mkdir -p /tools/my-cluster$ cd /tools/my-cluster<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、创建集群"><a href="#2、创建集群" class="headerlink" title="2、创建集群"></a>2、创建集群</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy new node1 node2 node3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、安装CEPH"><a href="#3、安装CEPH" class="headerlink" title="3、安装CEPH"></a>3、安装CEPH</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy install admin-node node1 node2 node3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、配置初始monitor"><a href="#4、配置初始monitor" class="headerlink" title="4、配置初始monitor"></a>4、配置初始monitor</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy mon create-initial<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、确认文件"><a href="#5、确认文件" class="headerlink" title="5、确认文件"></a>5、确认文件</h4><p>完成上述操作后，当前目录里应该会出现这些密钥环：</p><ul><li><code>{cluster-name}.client.admin.keyring</code></li><li><code>{cluster-name}.bootstrap-osd.keyring</code></li><li><code>{cluster-name}.bootstrap-mds.keyring</code></li><li><code>{cluster-name}.bootstrap-rgw.keyring</code></li></ul><h3 id="二、添加osd"><a href="#二、添加osd" class="headerlink" title="二、添加osd"></a>二、添加osd</h3><h4 id="1、列出node-可用磁盘"><a href="#1、列出node-可用磁盘" class="headerlink" title="1、列出node 可用磁盘"></a>1、列出node 可用磁盘</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy disk list node1$ ceph-deploy disk list node2$ ceph-deploy disk list node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、杀死、擦除、销毁—–设备的分区表和内容"><a href="#2、杀死、擦除、销毁—–设备的分区表和内容" class="headerlink" title="2、杀死、擦除、销毁—–设备的分区表和内容"></a>2、杀死、擦除、销毁—–设备的分区表和内容</h4><p>执行前确定磁盘名称正确</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy disk zap node1 /dev/sdb$ ceph-deploy disk zap node2 /dev/sdb$ ceph-deploy disk zap node3 /dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、初始化osd磁盘"><a href="#3、初始化osd磁盘" class="headerlink" title="3、初始化osd磁盘"></a>3、初始化osd磁盘</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy osd create node1 --data /dev/sdb$ ceph-deploy osd create node2 --data /dev/sdb$ ceph-deploy osd create node3 --data /dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4、复制配置文件和-admin-密钥拷贝到管理节点和-Ceph-节点"><a href="#4、复制配置文件和-admin-密钥拷贝到管理节点和-Ceph-节点" class="headerlink" title="4、复制配置文件和 admin 密钥拷贝到管理节点和 Ceph 节点"></a>4、复制配置文件和 admin 密钥拷贝到管理节点和 Ceph 节点</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy admin admin-node node1 node2 node3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、检查集群健康状态"><a href="#5、检查集群健康状态" class="headerlink" title="5、检查集群健康状态"></a>5、检查集群健康状态</h4><p>用root执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph health$ ceph -s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>等 peering 完成后，集群应该达到 <code>active + clean</code> 状态</p><h3 id="三、启用cephfs"><a href="#三、启用cephfs" class="headerlink" title="三、启用cephfs"></a>三、启用cephfs</h3><h4 id="1、启用mds服务"><a href="#1、启用mds服务" class="headerlink" title="1、启用mds服务"></a>1、启用mds服务</h4><p>至少需要一个元数据服务器才能使用 CephFS</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy mds create node1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、创建pool"><a href="#2、创建pool" class="headerlink" title="2、创建pool"></a>2、创建pool</h4><p>CephFS 需要两个 Pools，cephfs_data 和 cephfs_metadata，分别存储文件数据和文件元数据。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd pool create cephfs_data 128 128$ ceph osd pool create cephfs_metadata 64 64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一般 metadata pool 可以从相对较少的 PGs 启动, 之后可以根据需要增加 PGs，存储着 CephFS 文件的元数据</p><h4 id="3、创建CephFS"><a href="#3、创建CephFS" class="headerlink" title="3、创建CephFS"></a>3、创建CephFS</h4><p>metadata，data按照顺序。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph fs new cephfs cephfs_metadata cephfs_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、查看CephFS"><a href="#4、查看CephFS" class="headerlink" title="4、查看CephFS"></a>4、查看CephFS</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph fs ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、挂载CephFS"><a href="#四、挂载CephFS" class="headerlink" title="四、挂载CephFS"></a>四、挂载CephFS</h3><p>挂载cephfs有两种方式，kernel driver和fuse</p><h4 id="1、kernel-driver挂载"><a href="#1、kernel-driver挂载" class="headerlink" title="1、kernel driver挂载"></a>1、kernel driver挂载</h4><h4 id="1）关闭认证情况"><a href="#1）关闭认证情况" class="headerlink" title="1）关闭认证情况"></a>1）关闭认证情况</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo mkdir /mnt/wyl$ sudo mount -t ceph 192.168.xxx.111:/ /mnt/wyl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置开机自动挂载/etc/fstab</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">192.168.xxx.111:/     /mnt/wyl    ceph   noatime,_netdev    0       2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2）启用认证情况"><a href="#2）启用认证情况" class="headerlink" title="2）启用认证情况"></a>2）启用认证情况</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat ceph.client.admin.keyring[client.admin]key = AQBSdU5bT27AKxAAvKoWQdGpSuNRCHjC4B8DVA==$ mount -t ceph 192.168.xxx.111:/ /mnt/wyl  -o name=admin,secret=AQBSdU5bT27AKxAAvKoWQdGpSuNRCHjC4B8DVA==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）-查看认证方式"><a href="#3）-查看认证方式" class="headerlink" title="3） 查看认证方式"></a>3） 查看认证方式</h4><p>auth的值为none为禁用，cephx为启用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat /etc/ceph/ceph.conf auth_cluster_required = cephxauth_service_required = cephxauth_client_required = cephx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、fuse挂载"><a href="#2、fuse挂载" class="headerlink" title="2、fuse挂载"></a>2、fuse挂载</h4><h4 id="1）安装挂载工具"><a href="#1）安装挂载工具" class="headerlink" title="1）安装挂载工具"></a>1）安装挂载工具</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum -y install ceph-fuse ceph<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2）将存储节点的admin秘钥拷贝到本地"><a href="#2）将存储节点的admin秘钥拷贝到本地" class="headerlink" title="2）将存储节点的admin秘钥拷贝到本地"></a>2）将存储节点的admin秘钥拷贝到本地</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh root@node1 "ceph-authtool -p /etc/ceph/ceph.client.admin.keyring" &gt; admin.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3）赋予权限"><a href="#3）赋予权限" class="headerlink" title="3）赋予权限"></a>3）赋予权限</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ chmod 600 admin.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4）执行挂载"><a href="#4）执行挂载" class="headerlink" title="4）执行挂载"></a>4）执行挂载</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mount -t ceph node1:/ /mnt -o name=admin,secretfile=admin.key $ df -hT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5）设置开机自动挂载-etc-fstab"><a href="#5）设置开机自动挂载-etc-fstab" class="headerlink" title="5）设置开机自动挂载/etc/fstab"></a>5）设置开机自动挂载/etc/fstab</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">id=admin,conf=/etc/ceph/ceph.conf  /mnt fuse.ceph defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="一、admin-socket-exception-getting-command-descriptions-Errno-2-No-such-file-or-directory问题解决"><a href="#一、admin-socket-exception-getting-command-descriptions-Errno-2-No-such-file-or-directory问题解决" class="headerlink" title="一、admin_socket: exception getting command descriptions: [Errno 2] No such file or directory问题解决"></a>一、admin_socket: exception getting command descriptions: [Errno 2] No such file or directory问题解决</h2><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1、检查防火墙有没有关闭"><a href="#1、检查防火墙有没有关闭" class="headerlink" title="1、检查防火墙有没有关闭"></a>1、检查防火墙有没有关闭</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ iptables -F$ getenforce$ setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、删除之前版本ceph残留的文件"><a href="#2、删除之前版本ceph残留的文件" class="headerlink" title="2、删除之前版本ceph残留的文件"></a>2、删除之前版本ceph残留的文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rm -rf /etc/ceph/*$ rm -rf /var/lib/ceph/*/*$ rm -rf /var/log/ceph/*$ rm -rf /var/run/ceph/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、命令mount-t-ceph-xxx-或者-mount-ceph-xxx挂载cephfs时，提示”mount-error-22-Invalid-argument”。"><a href="#二、命令mount-t-ceph-xxx-或者-mount-ceph-xxx挂载cephfs时，提示”mount-error-22-Invalid-argument”。" class="headerlink" title="二、命令mount -t ceph xxx 或者 mount.ceph xxx挂载cephfs时，提示”mount error 22 = Invalid argument”。"></a>二、命令mount -t ceph xxx 或者 mount.ceph xxx挂载cephfs时，提示”mount error 22 = Invalid argument”。</h2><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><h3 id="1、查看密钥，可知用户名admin的密钥如下："><a href="#1、查看密钥，可知用户名admin的密钥如下：" class="headerlink" title="1、查看密钥，可知用户名admin的密钥如下："></a>1、查看密钥，可知用户名admin的密钥如下：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo cat ./ceph.client.admin.keyring[client.admin]        key = AQDYoQFd0Xr+CRAAIwRmwD7yWim2Nzq44wRwqw==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、直接指定密钥挂载"><a href="#2、直接指定密钥挂载" class="headerlink" title="2、直接指定密钥挂载"></a>2、直接指定密钥挂载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo mount.ceph node1:6789:/ ~/client_cephfs_mnt/ -o name=admin,secret=AQDYoQFd0Xr+CRAAIwRmwD7yWim2Nzq44wRwqw==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、无法删除image报rbd-error-image-still-has-watchers"><a href="#三、无法删除image报rbd-error-image-still-has-watchers" class="headerlink" title="三、无法删除image报rbd: error: image still has watchers"></a>三、无法删除image报rbd: error: image still has watchers</h2><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><h3 id="1、查看当前image上的watcher"><a href="#1、查看当前image上的watcher" class="headerlink" title="1、查看当前image上的watcher"></a>1、查看当前image上的watcher</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rbd status foowatcher=192.168.xxx.111:0/1135656048 client.4172 cookie=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、把该watcher加入黑名单："><a href="#2、把该watcher加入黑名单：" class="headerlink" title="2、把该watcher加入黑名单："></a>2、把该watcher加入黑名单：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd blacklist add 192.168.xxx.111:0/1135656048 blacklisting 192.168.xxx.111:0/1135656048 until 2017-10-18 12:04:19.103313 (3600 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、删除该image："><a href="#3、删除该image：" class="headerlink" title="3、删除该image："></a>3、删除该image：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rbd rm fooRemoving image: 100% complete...done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、查询黑名单列表"><a href="#4、查询黑名单列表" class="headerlink" title="4、查询黑名单列表"></a>4、查询黑名单列表</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd blacklist lslisted 1 entries192.168.xxx.111:0/1135656048 2017-10-18 12:04:19.103313<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5、从黑名单移出一个客户端："><a href="#5、从黑名单移出一个客户端：" class="headerlink" title="5、从黑名单移出一个客户端："></a>5、从黑名单移出一个客户端：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd blacklist rm 192.168.xxx.111:0/1135656048 un-blacklisting 192.168.xxx.111:0/1135656048<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6、清空黑名单："><a href="#6、清空黑名单：" class="headerlink" title="6、清空黑名单："></a>6、清空黑名单：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd blacklist clear removed all blacklist entries<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四、Ceph-client无法连接至集群问题解决"><a href="#四、Ceph-client无法连接至集群问题解决" class="headerlink" title="四、Ceph client无法连接至集群问题解决"></a>四、Ceph client无法连接至集群问题解决</h2><h3 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h3><h3 id="1、确定节点mon已启"><a href="#1、确定节点mon已启" class="headerlink" title="1、确定节点mon已启"></a>1、确定节点mon已启</h3><p>覆盖配置执行<code>ceph-deploy mon create-initial</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph-deploy --overwrite-conf mon create-initial<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、mon-挂掉后的快速恢复"><a href="#五、mon-挂掉后的快速恢复" class="headerlink" title="五、mon 挂掉后的快速恢复"></a>五、mon 挂掉后的快速恢复</h2><h3 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h3><h3 id="1、移除该mon"><a href="#1、移除该mon" class="headerlink" title="1、移除该mon"></a>1、移除该mon</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph mon remove node1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、清理该mon的文件"><a href="#2、清理该mon的文件" class="headerlink" title="2、清理该mon的文件"></a>2、清理该mon的文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rm -rf /var/lib/ceph/mon/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://blog.csdn.net/kong62/article/details/76998969">https://blog.csdn.net/kong62/article/details/76998969</a></p><h2 id="六、Error-EPERM-pool-deletion-is-disabled-you-must-first-set-the-mon-allow-pool-delete-config-option-to-true-before-you-can-destroy-a-pool"><a href="#六、Error-EPERM-pool-deletion-is-disabled-you-must-first-set-the-mon-allow-pool-delete-config-option-to-true-before-you-can-destroy-a-pool" class="headerlink" title="六、Error EPERM: pool deletion is disabled; you must first set the mon_allow_pool_delete config option to true before you can destroy a pool"></a>六、Error EPERM: pool deletion is disabled; you must first set the mon_allow_pool_delete config option to true before you can destroy a pool</h2><p>其实执行代码： ceph osd pool delete ecpool ecpool –yes-i-really-really-mean-it 就可以完成删除，但是此时有时候会报错：</p><p>这是由于没有配置mon节点的 mon_allow_pool_delete 字段所致，解决办法就是到mon节点进行相应的设置。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h3 id="1、打开mon节点的配置文件"><a href="#1、打开mon节点的配置文件" class="headerlink" title="1、打开mon节点的配置文件"></a>1、打开mon节点的配置文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vi /etc/ceph/ceph.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、在配置文件中添加如下内容"><a href="#2、在配置文件中添加如下内容" class="headerlink" title="2、在配置文件中添加如下内容"></a>2、在配置文件中添加如下内容</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mon_allow_pool_delete = true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、重启所有节点ceph-mon，osd服务："><a href="#3、重启所有节点ceph-mon，osd服务：" class="headerlink" title="3、重启所有节点ceph-mon，osd服务："></a>3、重启所有节点ceph-mon，osd服务：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ systemctl restart ceph-mon.target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、执行删除pool命令"><a href="#4、执行删除pool命令" class="headerlink" title="4、执行删除pool命令"></a>4、执行删除pool命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd pool delete ecpool ecpool –yes-i-really-really-mean-it<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yum install ceph-deploy.noarch -y mkdir ceph-cluster cd ceph-cluster/</p><p>ceph-deploy new k8s-ceph-0001 k8s-ceph-0002 k8s-ceph-0003 ceph-deploy mon create-initial ceph-deploy admin k8s-ceph-0001 k8s-ceph-0002 k8s-ceph-0003 ceph-deploy mgr create k8s-ceph-0001 k8s-ceph-0002 k8s-ceph-0003</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="一、ceph-conf文件配置"><a href="#一、ceph-conf文件配置" class="headerlink" title="一、ceph.conf文件配置"></a>一、ceph.conf文件配置</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[global] fsid = 1235bE62-8ae1-difg-893a-892a675757c6 mon_initial_members = ceph-node01,ceph-node02,ceph-node03 mon_host = 192.168.170.11,192.168.170.12,192.168.170.13 auth_cluster_required = cephx auth_service_required = cephx auth_client_required = cephx public_network = 192.168.170.0/22 #管理网络 cluster_network = 192.168.180.0/22 #集群网络 mon_pg_warn_max_per_osd = 1000 #每个osd上pg数量警告值，这个可以根据具体规划来设定 osd_pool_default_size = 3 #默认副本数为3 osd_pool_default_min_size = 2 #最小副本数为2，也就是只能坏一个 mon_osd_full_ratio = .85 #存储使用率达到85%将不再提供数据存储 mon_osd_nearfull_ratio = .70 #存储使用率达到70%集群将会warn状态 osd_deep_scrub_randomize_ratio = 0.01 #随机深度清洗概率,值越大，随机深度清洗概率越高,太高会影响业务 [osd] osd_max_write_size = 1024 #默认90M，一次写操作最小值 osd_recovery_op_priority = 1 #默认为10, 1-63 osd修复操作的优先级, 。值越小，优先级越低 osd_recovery_max_active = 1 #限定每个osd上同时有多少个pg可以同时进行recover osd_recovery_max_single_start = 1 # 和osd_recovery_max_active一起使用，要理解其含义。假设我们配置osd_recovery_max_single_start为1，osd_recovery_max_active为3，那么，这意味着OSD在某个时刻会为一个PG启动一个恢复操作，而且最多可以有三个恢复操作同时处于活动状态。 osd_recovery_max_chunk = 1048576 #默认为8388608, 设置恢复数据块的大小，以防网络阻塞 osd_recovery_threads = 1 #恢复数据所需的线程数 osd_max_backfills = 1 #集群故障后,最大backfill数为1，太大会影响业务 osd_scrub_begin_hour = 22 #清洗开始时间为晚上22点 osd_scrub_end_hour = 7 #清洗结束时间为早上7点 osd_recovery_sleep = 0 #默认为0，recovery的时间间隔，会影响recovery时常，如果recovery导致业务不正常，可以调大该值，增加时间间隔 osd_crush_update_on_start = false # 新加的osd会up/in,但并不会更新crushmap，prepare+active期间不会导致数据迁移<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h1 id="一、pg-num和pgp-num概念"><a href="#一、pg-num和pgp-num概念" class="headerlink" title="一、pg_num和pgp_num概念"></a>一、pg_num和pgp_num概念</h1><p>pg_num：存储池的目录个数 pgp_num：pg可用的osd排列组合数量</p><h3 id="1、仅增大pg-num"><a href="#1、仅增大pg-num" class="headerlink" title="1、仅增大pg_num"></a>1、仅增大pg_num</h3><p>因为pgp_num没变，pg的osd组合仍只能从当前pgp_num种组合里面挑选，导致新增的pg和旧pg会有重复的osd组合，该现象称之为分裂；此时pg和osd的映射没有变</p><h3 id="2、继续增大pgp-num，使其等于pg-num"><a href="#2、继续增大pgp-num，使其等于pg-num" class="headerlink" title="2、继续增大pgp_num，使其等于pg_num"></a>2、继续增大pgp_num，使其等于pg_num</h3><p>旧pg没有变化，但新增pg的osd组合发生变化，即开始重新分布</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h3 id="一、查看mon节点上所有启动的ceph服务"><a href="#一、查看mon节点上所有启动的ceph服务" class="headerlink" title="一、查看mon节点上所有启动的ceph服务"></a>一、查看mon节点上所有启动的ceph服务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ systemctl list-units --type=service|grep ceph<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、打印存储池列表"><a href="#二、打印存储池列表" class="headerlink" title="二、打印存储池列表"></a>二、打印存储池列表</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ceph osd lspools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ceph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES启动报错</title>
      <link href="/2021/12/29/es-qi-dong-bao-cuo/"/>
      <url>/2021/12/29/es-qi-dong-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ERROR: [2] bootstrap checks failed[1]: memory locking requested for elasticsearch process but memory is not locked[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[1]: memory locking requested for elasticsearch process but memory is not locked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="官网的解释"><a href="#官网的解释" class="headerlink" title="官网的解释"></a>官网的解释</h3><p>发生系统swapping的时候ES节点的性能会非常差，也会影响节点的稳定性。所以要不惜一切代价来避免swapping。swapping会导致Java</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>去除文件句柄限制</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$vim /etc/security/limits.conf# End of file*       soft   nofile   102400*       hard   nofile   102400* soft core 0* hard core 0*       soft memlock unlimited  # 新增*       hard memlock unlimited  # 新增<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>vm.max_map_count</code>太小</p><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>max_map_count文件包含限制一个进程可以拥有的VMA(虚拟内存区域)的数量</p><p>调整<code>max_map_count</code>大小</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$vim /etc/sysctl.conf vm.max_map_count=262144 # 新增<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>随后执行<code>/sbin/sysctl -p</code>生效</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rancher2部署</title>
      <link href="/2021/12/28/rancher2-bu-shu/"/>
      <url>/2021/12/28/rancher2-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、服务端"><a href="#一、服务端" class="headerlink" title="一、服务端"></a>一、服务端</h1><h2 id="部署k3s"><a href="#部署k3s" class="headerlink" title="部署k3s"></a>部署k3s</h2><h3 id="单点"><a href="#单点" class="headerlink" title="单点"></a>单点</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -$ cp /etc/rancher/k3s/k3s.yaml  ~/.kube/config$ kubectl get pods --all-namespaces<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="多点"><a href="#多点" class="headerlink" title="多点"></a>多点</h3><p>在其他node上执行以下命令，<code>K3S_TOKEN</code> 在第一台服务器的<code>/var/lib/rancher/k3s/server/node-token</code>路径下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="部署rancher-server"><a href="#部署rancher-server" class="headerlink" title="部署rancher server"></a>部署rancher server</h2><h3 id="添加-Helm-Chart-仓库"><a href="#添加-Helm-Chart-仓库" class="headerlink" title="添加 Helm Chart 仓库"></a>添加 Helm Chart 仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ helm repo add rancher-stable http://rancher-mirror.oss-cn-beijing.aliyuncs.com/server-charts/stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="为-Rancher-创建-Namespace"><a href="#为-Rancher-创建-Namespace" class="headerlink" title="为 Rancher 创建 Namespace"></a>为 Rancher 创建 Namespace</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl create namespace cattle-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装cert-manager"><a href="#安装cert-manager" class="headerlink" title="安装cert-manager"></a>安装cert-manager</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 在升级Helm chart之前升级CRD资源$ kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.1/cert-manager.crds.yaml# 添加 Jetstack Helm 仓库$ helm repo add jetstack [https://charts.jetstack.io](https://charts.jetstack.io/)# 更新本地 Helm chart 仓库缓存$ helm repo update# ingress.tls.source不写默认是rancher自签证书，签证域名用的是hostname填的# replicas设置为 Rancher 部署所使用的复制数量默认为 3# --version 指定版本$ helm install rancher rancher-stable/rancher \ --namespace cattle-system \ --set hostname=rancher.my.xxx \ --set replicas=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="等待-Rancher-运行"><a href="#等待-Rancher-运行" class="headerlink" title="等待 Rancher 运行"></a>等待 Rancher 运行</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl -n cattle-system rollout status deploy/rancher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>用所填的<code>hostname</code>访问，如：<code>rancher.my.xxx</code></p><h1 id="二、代理端"><a href="#二、代理端" class="headerlink" title="二、代理端"></a>二、代理端</h1><h2 id="部署k8s"><a href="#部署k8s" class="headerlink" title="部署k8s"></a>部署k8s</h2><h3 id="设置基础环境"><a href="#设置基础环境" class="headerlink" title="设置基础环境"></a>设置基础环境</h3><p>关掉防火墙，selinux</p><p>禁用虚拟内存：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ swapoff -a $ sed -ri 's/.*swap.*/#&amp;/' /etc/fstab <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum -y  docker $ vi /etc/docker/daemon.json{ "registry-mirrors": ["https://registry.docker-cn.com"], "exec-opt": ["native.cgroupdriver=systemd"] }$ systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h3><p>新增repo包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定版本安装（rancher目前貌似不支持1.22版本以上的k8s）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum install -y kubelet-1.21.3 kubeadm-1.21.3 kubectl-1.21.3$ systemctl enable kubelet;systemctl start kubelet 　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>kubeadm安装k8s（单节点部署）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubeadm init --kubernetes-version=1.21.3  --apiserver-advertise-address=本机ip --image-repository registry.aliyuncs.com/google_containers  --service-cidr=10.10.0.0/16 --pod-network-cidr=10.122.0.0/16 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完成后，根据提示执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mkdir -p $HOME/.kube$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config$ sudo chown $(id -u):$(id -g) $HOME/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加cni"><a href="#添加cni" class="headerlink" title="添加cni"></a>添加cni</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ wget https://docs.projectcalico.org/manifests/calico.yaml$ vi calico.yaml    - name: IP_AUTODETECTION_METHOD  # DaemonSet中添加该环境变量      value: interface=ens160  $ kubectl apply -f calico.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="污点"><a href="#污点" class="headerlink" title="污点"></a>污点</h3><p>单点，所以要把master污点去掉</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl describe node 本机 $ kubectl taint node 本机 node-role.kubernetes.io/master:NoSchedule-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="dns解析"><a href="#dns解析" class="headerlink" title="dns解析"></a>dns解析</h2><p>不走dns域名解析可以用本地解析</p><h3 id="在代理端修改hosts"><a href="#在代理端修改hosts" class="headerlink" title="在代理端修改hosts"></a>在代理端修改hosts</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vi /etc/hosts# 服务端ip地址192.168.x.x rancher.my.xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改coredns-configmap"><a href="#修改coredns-configmap" class="headerlink" title="修改coredns configmap"></a>修改coredns configmap</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl edit cm coredns -n kube-system hosts {    192.168.x.x rancher.my.xxx     fallthrougu }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl delete pods  coredns-xxx -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rancher </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rancher </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
